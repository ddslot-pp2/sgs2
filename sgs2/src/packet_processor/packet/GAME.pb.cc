// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GAME.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GAME.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace GAME {
class USER_INFODefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<USER_INFO> {
} _USER_INFO_default_instance_;
class CS_ENTER_FIELDDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_ENTER_FIELD> {
} _CS_ENTER_FIELD_default_instance_;
class SC_ENTER_FIELDDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_ENTER_FIELD> {
} _SC_ENTER_FIELD_default_instance_;
class SC_NOTI_ENTER_FIELDDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_NOTI_ENTER_FIELD> {
} _SC_NOTI_ENTER_FIELD_default_instance_;
class CS_LEAVE_FIELDDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_LEAVE_FIELD> {
} _CS_LEAVE_FIELD_default_instance_;
class SC_NOTI_LEAVE_FIELDDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_NOTI_LEAVE_FIELD> {
} _SC_NOTI_LEAVE_FIELD_default_instance_;
class CS_MOVE_OBJECTDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_MOVE_OBJECT> {
} _CS_MOVE_OBJECT_default_instance_;
class SC_NOTI_MOVE_OBJECTDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_NOTI_MOVE_OBJECT> {
} _SC_NOTI_MOVE_OBJECT_default_instance_;
class CS_USE_SKILLDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_USE_SKILL> {
} _CS_USE_SKILL_default_instance_;
class SC_NOTI_USE_SKILLDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_NOTI_USE_SKILL> {
} _SC_NOTI_USE_SKILL_default_instance_;
class SC_NOTI_DESTROY_SKILLDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_NOTI_DESTROY_SKILL> {
} _SC_NOTI_DESTROY_SKILL_default_instance_;
class CS_PINGDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_PING> {
} _CS_PING_default_instance_;
class SC_PINGDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_PING> {
} _SC_PING_default_instance_;

namespace protobuf_GAME_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[13];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USER_INFO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USER_INFO, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USER_INFO, hp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USER_INFO, pos_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USER_INFO, pos_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USER_INFO, pos_z_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ENTER_FIELD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ENTER_FIELD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ENTER_FIELD, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ENTER_FIELD, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ENTER_FIELD, pos_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ENTER_FIELD, pos_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ENTER_FIELD, pos_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ENTER_FIELD, ec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ENTER_FIELD, user_infos_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_NOTI_ENTER_FIELD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_NOTI_ENTER_FIELD, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_NOTI_ENTER_FIELD, hp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_NOTI_ENTER_FIELD, pos_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_NOTI_ENTER_FIELD, pos_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_NOTI_ENTER_FIELD, pos_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_NOTI_ENTER_FIELD, timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_LEAVE_FIELD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_LEAVE_FIELD, key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_NOTI_LEAVE_FIELD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_NOTI_LEAVE_FIELD, key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_MOVE_OBJECT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_MOVE_OBJECT, pos_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_MOVE_OBJECT, pos_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_MOVE_OBJECT, pos_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_MOVE_OBJECT, rot_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_MOVE_OBJECT, rot_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_MOVE_OBJECT, rot_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_MOVE_OBJECT, rot_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_MOVE_OBJECT, timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_NOTI_MOVE_OBJECT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_NOTI_MOVE_OBJECT, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_NOTI_MOVE_OBJECT, pos_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_NOTI_MOVE_OBJECT, pos_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_NOTI_MOVE_OBJECT, pos_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_NOTI_MOVE_OBJECT, rot_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_NOTI_MOVE_OBJECT, rot_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_NOTI_MOVE_OBJECT, rot_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_NOTI_MOVE_OBJECT, rot_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_NOTI_MOVE_OBJECT, timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_USE_SKILL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_USE_SKILL, skill_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_USE_SKILL, forward_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_USE_SKILL, forward_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_USE_SKILL, forward_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_USE_SKILL, rot_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_USE_SKILL, rot_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_USE_SKILL, rot_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_USE_SKILL, rot_w_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_NOTI_USE_SKILL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_NOTI_USE_SKILL, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_NOTI_USE_SKILL, skill_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_NOTI_USE_SKILL, skill_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_NOTI_USE_SKILL, pos_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_NOTI_USE_SKILL, pos_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_NOTI_USE_SKILL, pos_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_NOTI_USE_SKILL, forward_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_NOTI_USE_SKILL, forward_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_NOTI_USE_SKILL, forward_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_NOTI_USE_SKILL, rot_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_NOTI_USE_SKILL, rot_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_NOTI_USE_SKILL, rot_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_NOTI_USE_SKILL, rot_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_NOTI_USE_SKILL, distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_NOTI_USE_SKILL, speed_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_NOTI_DESTROY_SKILL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_NOTI_DESTROY_SKILL, skill_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_NOTI_DESTROY_SKILL, target_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_NOTI_DESTROY_SKILL, damage_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_PING, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_PING, timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_PING, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_PING, timestamp_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(USER_INFO)},
  { 10, -1, sizeof(CS_ENTER_FIELD)},
  { 15, -1, sizeof(SC_ENTER_FIELD)},
  { 27, -1, sizeof(SC_NOTI_ENTER_FIELD)},
  { 38, -1, sizeof(CS_LEAVE_FIELD)},
  { 44, -1, sizeof(SC_NOTI_LEAVE_FIELD)},
  { 50, -1, sizeof(CS_MOVE_OBJECT)},
  { 63, -1, sizeof(SC_NOTI_MOVE_OBJECT)},
  { 77, -1, sizeof(CS_USE_SKILL)},
  { 90, -1, sizeof(SC_NOTI_USE_SKILL)},
  { 110, -1, sizeof(SC_NOTI_DESTROY_SKILL)},
  { 118, -1, sizeof(CS_PING)},
  { 124, -1, sizeof(SC_PING)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_USER_INFO_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_ENTER_FIELD_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_ENTER_FIELD_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_NOTI_ENTER_FIELD_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_LEAVE_FIELD_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_NOTI_LEAVE_FIELD_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_MOVE_OBJECT_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_NOTI_MOVE_OBJECT_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_USE_SKILL_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_NOTI_USE_SKILL_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_NOTI_DESTROY_SKILL_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_PING_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_PING_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "GAME.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 13);
}

}  // namespace

void TableStruct::Shutdown() {
  _USER_INFO_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CS_ENTER_FIELD_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _SC_ENTER_FIELD_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _SC_NOTI_ENTER_FIELD_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CS_LEAVE_FIELD_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _SC_NOTI_LEAVE_FIELD_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CS_MOVE_OBJECT_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _SC_NOTI_MOVE_OBJECT_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _CS_USE_SKILL_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _SC_NOTI_USE_SKILL_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _SC_NOTI_DESTROY_SKILL_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _CS_PING_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _SC_PING_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _USER_INFO_default_instance_.DefaultConstruct();
  _CS_ENTER_FIELD_default_instance_.DefaultConstruct();
  _SC_ENTER_FIELD_default_instance_.DefaultConstruct();
  _SC_NOTI_ENTER_FIELD_default_instance_.DefaultConstruct();
  _CS_LEAVE_FIELD_default_instance_.DefaultConstruct();
  _SC_NOTI_LEAVE_FIELD_default_instance_.DefaultConstruct();
  _CS_MOVE_OBJECT_default_instance_.DefaultConstruct();
  _SC_NOTI_MOVE_OBJECT_default_instance_.DefaultConstruct();
  _CS_USE_SKILL_default_instance_.DefaultConstruct();
  _SC_NOTI_USE_SKILL_default_instance_.DefaultConstruct();
  _SC_NOTI_DESTROY_SKILL_default_instance_.DefaultConstruct();
  _CS_PING_default_instance_.DefaultConstruct();
  _SC_PING_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\nGAME.proto\022\004GAME\"Q\n\tUSER_INFO\022\013\n\003key\030\001"
      " \001(\003\022\n\n\002hp\030\002 \001(\005\022\r\n\005pos_x\030\003 \001(\002\022\r\n\005pos_y"
      "\030\004 \001(\002\022\r\n\005pos_z\030\005 \001(\002\"\020\n\016CS_ENTER_FIELD\""
      "\213\001\n\016SC_ENTER_FIELD\022\016\n\006result\030\001 \001(\010\022\013\n\003ke"
      "y\030\002 \001(\003\022\r\n\005pos_x\030\003 \001(\002\022\r\n\005pos_y\030\004 \001(\002\022\r\n"
      "\005pos_z\030\005 \001(\002\022\n\n\002ec\030\006 \001(\t\022#\n\nuser_infos\030\007"
      " \003(\0132\017.GAME.USER_INFO\"n\n\023SC_NOTI_ENTER_F"
      "IELD\022\013\n\003key\030\001 \001(\003\022\n\n\002hp\030\002 \001(\005\022\r\n\005pos_x\030\003"
      " \001(\002\022\r\n\005pos_y\030\004 \001(\002\022\r\n\005pos_z\030\005 \001(\002\022\021\n\tti"
      "mestamp\030\006 \001(\003\"\035\n\016CS_LEAVE_FIELD\022\013\n\003key\030\001"
      " \001(\003\"\"\n\023SC_NOTI_LEAVE_FIELD\022\013\n\003key\030\001 \001(\003"
      "\"\214\001\n\016CS_MOVE_OBJECT\022\r\n\005pos_x\030\001 \001(\002\022\r\n\005po"
      "s_y\030\002 \001(\002\022\r\n\005pos_z\030\003 \001(\002\022\r\n\005rot_x\030\004 \001(\002\022"
      "\r\n\005rot_y\030\005 \001(\002\022\r\n\005rot_z\030\006 \001(\002\022\r\n\005rot_w\030\007"
      " \001(\002\022\021\n\ttimestamp\030\010 \001(\003\"\236\001\n\023SC_NOTI_MOVE"
      "_OBJECT\022\013\n\003key\030\001 \001(\003\022\r\n\005pos_x\030\002 \001(\002\022\r\n\005p"
      "os_y\030\003 \001(\002\022\r\n\005pos_z\030\004 \001(\002\022\r\n\005rot_x\030\005 \001(\002"
      "\022\r\n\005rot_y\030\006 \001(\002\022\r\n\005rot_z\030\007 \001(\002\022\r\n\005rot_w\030"
      "\010 \001(\002\022\021\n\ttimestamp\030\t \001(\003\"\225\001\n\014CS_USE_SKIL"
      "L\022\020\n\010skill_id\030\001 \001(\005\022\021\n\tforward_x\030\002 \001(\002\022\021"
      "\n\tforward_y\030\003 \001(\002\022\021\n\tforward_z\030\004 \001(\002\022\r\n\005"
      "rot_x\030\005 \001(\002\022\r\n\005rot_y\030\006 \001(\002\022\r\n\005rot_z\030\007 \001("
      "\002\022\r\n\005rot_w\030\010 \001(\002\"\210\002\n\021SC_NOTI_USE_SKILL\022\013"
      "\n\003key\030\001 \001(\003\022\021\n\tskill_key\030\002 \001(\003\022\020\n\010skill_"
      "id\030\003 \001(\005\022\r\n\005pos_x\030\004 \001(\002\022\r\n\005pos_y\030\005 \001(\002\022\r"
      "\n\005pos_z\030\006 \001(\002\022\021\n\tforward_x\030\007 \001(\002\022\021\n\tforw"
      "ard_y\030\010 \001(\002\022\021\n\tforward_z\030\t \001(\002\022\r\n\005rot_x\030"
      "\n \001(\002\022\r\n\005rot_y\030\013 \001(\002\022\r\n\005rot_z\030\014 \001(\002\022\r\n\005r"
      "ot_w\030\r \001(\002\022\020\n\010distance\030\016 \001(\002\022\r\n\005speed\030\017 "
      "\001(\002\"N\n\025SC_NOTI_DESTROY_SKILL\022\021\n\tskill_ke"
      "y\030\001 \001(\003\022\022\n\ntarget_key\030\002 \001(\003\022\016\n\006damage\030\003 "
      "\001(\002\"\034\n\007CS_PING\022\021\n\ttimestamp\030\001 \001(\003\"\034\n\007SC_"
      "PING\022\021\n\ttimestamp\030\001 \001(\003b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1311);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GAME.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_GAME_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int USER_INFO::kKeyFieldNumber;
const int USER_INFO::kHpFieldNumber;
const int USER_INFO::kPosXFieldNumber;
const int USER_INFO::kPosYFieldNumber;
const int USER_INFO::kPosZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

USER_INFO::USER_INFO()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_GAME_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GAME.USER_INFO)
}
USER_INFO::USER_INFO(const USER_INFO& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&key_, &from.key_,
    reinterpret_cast<char*>(&pos_z_) -
    reinterpret_cast<char*>(&key_) + sizeof(pos_z_));
  // @@protoc_insertion_point(copy_constructor:GAME.USER_INFO)
}

void USER_INFO::SharedCtor() {
  ::memset(&key_, 0, reinterpret_cast<char*>(&pos_z_) -
    reinterpret_cast<char*>(&key_) + sizeof(pos_z_));
  _cached_size_ = 0;
}

USER_INFO::~USER_INFO() {
  // @@protoc_insertion_point(destructor:GAME.USER_INFO)
  SharedDtor();
}

void USER_INFO::SharedDtor() {
}

void USER_INFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* USER_INFO::descriptor() {
  protobuf_GAME_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GAME_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const USER_INFO& USER_INFO::default_instance() {
  protobuf_GAME_2eproto::InitDefaults();
  return *internal_default_instance();
}

USER_INFO* USER_INFO::New(::google::protobuf::Arena* arena) const {
  USER_INFO* n = new USER_INFO;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void USER_INFO::Clear() {
// @@protoc_insertion_point(message_clear_start:GAME.USER_INFO)
  ::memset(&key_, 0, reinterpret_cast<char*>(&pos_z_) -
    reinterpret_cast<char*>(&key_) + sizeof(pos_z_));
}

bool USER_INFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GAME.USER_INFO)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 hp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pos_x = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pos_y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pos_z = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GAME.USER_INFO)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GAME.USER_INFO)
  return false;
#undef DO_
}

void USER_INFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GAME.USER_INFO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 key = 1;
  if (this->key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->key(), output);
  }

  // int32 hp = 2;
  if (this->hp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hp(), output);
  }

  // float pos_x = 3;
  if (this->pos_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->pos_x(), output);
  }

  // float pos_y = 4;
  if (this->pos_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->pos_y(), output);
  }

  // float pos_z = 5;
  if (this->pos_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->pos_z(), output);
  }

  // @@protoc_insertion_point(serialize_end:GAME.USER_INFO)
}

::google::protobuf::uint8* USER_INFO::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GAME.USER_INFO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 key = 1;
  if (this->key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->key(), target);
  }

  // int32 hp = 2;
  if (this->hp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hp(), target);
  }

  // float pos_x = 3;
  if (this->pos_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->pos_x(), target);
  }

  // float pos_y = 4;
  if (this->pos_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->pos_y(), target);
  }

  // float pos_z = 5;
  if (this->pos_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->pos_z(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GAME.USER_INFO)
  return target;
}

size_t USER_INFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GAME.USER_INFO)
  size_t total_size = 0;

  // int64 key = 1;
  if (this->key() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->key());
  }

  // int32 hp = 2;
  if (this->hp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hp());
  }

  // float pos_x = 3;
  if (this->pos_x() != 0) {
    total_size += 1 + 4;
  }

  // float pos_y = 4;
  if (this->pos_y() != 0) {
    total_size += 1 + 4;
  }

  // float pos_z = 5;
  if (this->pos_z() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void USER_INFO::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GAME.USER_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  const USER_INFO* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const USER_INFO>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GAME.USER_INFO)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GAME.USER_INFO)
    MergeFrom(*source);
  }
}

void USER_INFO::MergeFrom(const USER_INFO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GAME.USER_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key() != 0) {
    set_key(from.key());
  }
  if (from.hp() != 0) {
    set_hp(from.hp());
  }
  if (from.pos_x() != 0) {
    set_pos_x(from.pos_x());
  }
  if (from.pos_y() != 0) {
    set_pos_y(from.pos_y());
  }
  if (from.pos_z() != 0) {
    set_pos_z(from.pos_z());
  }
}

void USER_INFO::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GAME.USER_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USER_INFO::CopyFrom(const USER_INFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GAME.USER_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USER_INFO::IsInitialized() const {
  return true;
}

void USER_INFO::Swap(USER_INFO* other) {
  if (other == this) return;
  InternalSwap(other);
}
void USER_INFO::InternalSwap(USER_INFO* other) {
  std::swap(key_, other->key_);
  std::swap(hp_, other->hp_);
  std::swap(pos_x_, other->pos_x_);
  std::swap(pos_y_, other->pos_y_);
  std::swap(pos_z_, other->pos_z_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata USER_INFO::GetMetadata() const {
  protobuf_GAME_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GAME_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// USER_INFO

// int64 key = 1;
void USER_INFO::clear_key() {
  key_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 USER_INFO::key() const {
  // @@protoc_insertion_point(field_get:GAME.USER_INFO.key)
  return key_;
}
void USER_INFO::set_key(::google::protobuf::int64 value) {
  
  key_ = value;
  // @@protoc_insertion_point(field_set:GAME.USER_INFO.key)
}

// int32 hp = 2;
void USER_INFO::clear_hp() {
  hp_ = 0;
}
::google::protobuf::int32 USER_INFO::hp() const {
  // @@protoc_insertion_point(field_get:GAME.USER_INFO.hp)
  return hp_;
}
void USER_INFO::set_hp(::google::protobuf::int32 value) {
  
  hp_ = value;
  // @@protoc_insertion_point(field_set:GAME.USER_INFO.hp)
}

// float pos_x = 3;
void USER_INFO::clear_pos_x() {
  pos_x_ = 0;
}
float USER_INFO::pos_x() const {
  // @@protoc_insertion_point(field_get:GAME.USER_INFO.pos_x)
  return pos_x_;
}
void USER_INFO::set_pos_x(float value) {
  
  pos_x_ = value;
  // @@protoc_insertion_point(field_set:GAME.USER_INFO.pos_x)
}

// float pos_y = 4;
void USER_INFO::clear_pos_y() {
  pos_y_ = 0;
}
float USER_INFO::pos_y() const {
  // @@protoc_insertion_point(field_get:GAME.USER_INFO.pos_y)
  return pos_y_;
}
void USER_INFO::set_pos_y(float value) {
  
  pos_y_ = value;
  // @@protoc_insertion_point(field_set:GAME.USER_INFO.pos_y)
}

// float pos_z = 5;
void USER_INFO::clear_pos_z() {
  pos_z_ = 0;
}
float USER_INFO::pos_z() const {
  // @@protoc_insertion_point(field_get:GAME.USER_INFO.pos_z)
  return pos_z_;
}
void USER_INFO::set_pos_z(float value) {
  
  pos_z_ = value;
  // @@protoc_insertion_point(field_set:GAME.USER_INFO.pos_z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_ENTER_FIELD::CS_ENTER_FIELD()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_GAME_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GAME.CS_ENTER_FIELD)
}
CS_ENTER_FIELD::CS_ENTER_FIELD(const CS_ENTER_FIELD& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GAME.CS_ENTER_FIELD)
}

void CS_ENTER_FIELD::SharedCtor() {
  _cached_size_ = 0;
}

CS_ENTER_FIELD::~CS_ENTER_FIELD() {
  // @@protoc_insertion_point(destructor:GAME.CS_ENTER_FIELD)
  SharedDtor();
}

void CS_ENTER_FIELD::SharedDtor() {
}

void CS_ENTER_FIELD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_ENTER_FIELD::descriptor() {
  protobuf_GAME_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GAME_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_ENTER_FIELD& CS_ENTER_FIELD::default_instance() {
  protobuf_GAME_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_ENTER_FIELD* CS_ENTER_FIELD::New(::google::protobuf::Arena* arena) const {
  CS_ENTER_FIELD* n = new CS_ENTER_FIELD;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_ENTER_FIELD::Clear() {
// @@protoc_insertion_point(message_clear_start:GAME.CS_ENTER_FIELD)
}

bool CS_ENTER_FIELD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GAME.CS_ENTER_FIELD)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:GAME.CS_ENTER_FIELD)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GAME.CS_ENTER_FIELD)
  return false;
#undef DO_
}

void CS_ENTER_FIELD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GAME.CS_ENTER_FIELD)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_end:GAME.CS_ENTER_FIELD)
}

::google::protobuf::uint8* CS_ENTER_FIELD::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GAME.CS_ENTER_FIELD)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_to_array_end:GAME.CS_ENTER_FIELD)
  return target;
}

size_t CS_ENTER_FIELD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GAME.CS_ENTER_FIELD)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_ENTER_FIELD::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GAME.CS_ENTER_FIELD)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_ENTER_FIELD* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_ENTER_FIELD>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GAME.CS_ENTER_FIELD)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GAME.CS_ENTER_FIELD)
    MergeFrom(*source);
  }
}

void CS_ENTER_FIELD::MergeFrom(const CS_ENTER_FIELD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GAME.CS_ENTER_FIELD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CS_ENTER_FIELD::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GAME.CS_ENTER_FIELD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_ENTER_FIELD::CopyFrom(const CS_ENTER_FIELD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GAME.CS_ENTER_FIELD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_ENTER_FIELD::IsInitialized() const {
  return true;
}

void CS_ENTER_FIELD::Swap(CS_ENTER_FIELD* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_ENTER_FIELD::InternalSwap(CS_ENTER_FIELD* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_ENTER_FIELD::GetMetadata() const {
  protobuf_GAME_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GAME_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_ENTER_FIELD

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_ENTER_FIELD::kResultFieldNumber;
const int SC_ENTER_FIELD::kKeyFieldNumber;
const int SC_ENTER_FIELD::kPosXFieldNumber;
const int SC_ENTER_FIELD::kPosYFieldNumber;
const int SC_ENTER_FIELD::kPosZFieldNumber;
const int SC_ENTER_FIELD::kEcFieldNumber;
const int SC_ENTER_FIELD::kUserInfosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_ENTER_FIELD::SC_ENTER_FIELD()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_GAME_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GAME.SC_ENTER_FIELD)
}
SC_ENTER_FIELD::SC_ENTER_FIELD(const SC_ENTER_FIELD& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      user_infos_(from.user_infos_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ec_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ec().size() > 0) {
    ec_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ec_);
  }
  ::memcpy(&key_, &from.key_,
    reinterpret_cast<char*>(&pos_z_) -
    reinterpret_cast<char*>(&key_) + sizeof(pos_z_));
  // @@protoc_insertion_point(copy_constructor:GAME.SC_ENTER_FIELD)
}

void SC_ENTER_FIELD::SharedCtor() {
  ec_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&key_, 0, reinterpret_cast<char*>(&pos_z_) -
    reinterpret_cast<char*>(&key_) + sizeof(pos_z_));
  _cached_size_ = 0;
}

SC_ENTER_FIELD::~SC_ENTER_FIELD() {
  // @@protoc_insertion_point(destructor:GAME.SC_ENTER_FIELD)
  SharedDtor();
}

void SC_ENTER_FIELD::SharedDtor() {
  ec_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SC_ENTER_FIELD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_ENTER_FIELD::descriptor() {
  protobuf_GAME_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GAME_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_ENTER_FIELD& SC_ENTER_FIELD::default_instance() {
  protobuf_GAME_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_ENTER_FIELD* SC_ENTER_FIELD::New(::google::protobuf::Arena* arena) const {
  SC_ENTER_FIELD* n = new SC_ENTER_FIELD;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_ENTER_FIELD::Clear() {
// @@protoc_insertion_point(message_clear_start:GAME.SC_ENTER_FIELD)
  user_infos_.Clear();
  ec_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&key_, 0, reinterpret_cast<char*>(&pos_z_) -
    reinterpret_cast<char*>(&key_) + sizeof(pos_z_));
}

bool SC_ENTER_FIELD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GAME.SC_ENTER_FIELD)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pos_x = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pos_y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pos_z = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ec = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ec()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ec().data(), this->ec().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GAME.SC_ENTER_FIELD.ec"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .GAME.USER_INFO user_infos = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GAME.SC_ENTER_FIELD)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GAME.SC_ENTER_FIELD)
  return false;
#undef DO_
}

void SC_ENTER_FIELD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GAME.SC_ENTER_FIELD)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // int64 key = 2;
  if (this->key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->key(), output);
  }

  // float pos_x = 3;
  if (this->pos_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->pos_x(), output);
  }

  // float pos_y = 4;
  if (this->pos_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->pos_y(), output);
  }

  // float pos_z = 5;
  if (this->pos_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->pos_z(), output);
  }

  // string ec = 6;
  if (this->ec().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ec().data(), this->ec().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GAME.SC_ENTER_FIELD.ec");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->ec(), output);
  }

  // repeated .GAME.USER_INFO user_infos = 7;
  for (unsigned int i = 0, n = this->user_infos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->user_infos(i), output);
  }

  // @@protoc_insertion_point(serialize_end:GAME.SC_ENTER_FIELD)
}

::google::protobuf::uint8* SC_ENTER_FIELD::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GAME.SC_ENTER_FIELD)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  // int64 key = 2;
  if (this->key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->key(), target);
  }

  // float pos_x = 3;
  if (this->pos_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->pos_x(), target);
  }

  // float pos_y = 4;
  if (this->pos_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->pos_y(), target);
  }

  // float pos_z = 5;
  if (this->pos_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->pos_z(), target);
  }

  // string ec = 6;
  if (this->ec().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ec().data(), this->ec().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GAME.SC_ENTER_FIELD.ec");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->ec(), target);
  }

  // repeated .GAME.USER_INFO user_infos = 7;
  for (unsigned int i = 0, n = this->user_infos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->user_infos(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GAME.SC_ENTER_FIELD)
  return target;
}

size_t SC_ENTER_FIELD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GAME.SC_ENTER_FIELD)
  size_t total_size = 0;

  // repeated .GAME.USER_INFO user_infos = 7;
  {
    unsigned int count = this->user_infos_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_infos(i));
    }
  }

  // string ec = 6;
  if (this->ec().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ec());
  }

  // int64 key = 2;
  if (this->key() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->key());
  }

  // bool result = 1;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  // float pos_x = 3;
  if (this->pos_x() != 0) {
    total_size += 1 + 4;
  }

  // float pos_y = 4;
  if (this->pos_y() != 0) {
    total_size += 1 + 4;
  }

  // float pos_z = 5;
  if (this->pos_z() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_ENTER_FIELD::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GAME.SC_ENTER_FIELD)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_ENTER_FIELD* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_ENTER_FIELD>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GAME.SC_ENTER_FIELD)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GAME.SC_ENTER_FIELD)
    MergeFrom(*source);
  }
}

void SC_ENTER_FIELD::MergeFrom(const SC_ENTER_FIELD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GAME.SC_ENTER_FIELD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_infos_.MergeFrom(from.user_infos_);
  if (from.ec().size() > 0) {

    ec_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ec_);
  }
  if (from.key() != 0) {
    set_key(from.key());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.pos_x() != 0) {
    set_pos_x(from.pos_x());
  }
  if (from.pos_y() != 0) {
    set_pos_y(from.pos_y());
  }
  if (from.pos_z() != 0) {
    set_pos_z(from.pos_z());
  }
}

void SC_ENTER_FIELD::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GAME.SC_ENTER_FIELD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_ENTER_FIELD::CopyFrom(const SC_ENTER_FIELD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GAME.SC_ENTER_FIELD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_ENTER_FIELD::IsInitialized() const {
  return true;
}

void SC_ENTER_FIELD::Swap(SC_ENTER_FIELD* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_ENTER_FIELD::InternalSwap(SC_ENTER_FIELD* other) {
  user_infos_.InternalSwap(&other->user_infos_);
  ec_.Swap(&other->ec_);
  std::swap(key_, other->key_);
  std::swap(result_, other->result_);
  std::swap(pos_x_, other->pos_x_);
  std::swap(pos_y_, other->pos_y_);
  std::swap(pos_z_, other->pos_z_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_ENTER_FIELD::GetMetadata() const {
  protobuf_GAME_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GAME_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_ENTER_FIELD

// bool result = 1;
void SC_ENTER_FIELD::clear_result() {
  result_ = false;
}
bool SC_ENTER_FIELD::result() const {
  // @@protoc_insertion_point(field_get:GAME.SC_ENTER_FIELD.result)
  return result_;
}
void SC_ENTER_FIELD::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:GAME.SC_ENTER_FIELD.result)
}

// int64 key = 2;
void SC_ENTER_FIELD::clear_key() {
  key_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SC_ENTER_FIELD::key() const {
  // @@protoc_insertion_point(field_get:GAME.SC_ENTER_FIELD.key)
  return key_;
}
void SC_ENTER_FIELD::set_key(::google::protobuf::int64 value) {
  
  key_ = value;
  // @@protoc_insertion_point(field_set:GAME.SC_ENTER_FIELD.key)
}

// float pos_x = 3;
void SC_ENTER_FIELD::clear_pos_x() {
  pos_x_ = 0;
}
float SC_ENTER_FIELD::pos_x() const {
  // @@protoc_insertion_point(field_get:GAME.SC_ENTER_FIELD.pos_x)
  return pos_x_;
}
void SC_ENTER_FIELD::set_pos_x(float value) {
  
  pos_x_ = value;
  // @@protoc_insertion_point(field_set:GAME.SC_ENTER_FIELD.pos_x)
}

// float pos_y = 4;
void SC_ENTER_FIELD::clear_pos_y() {
  pos_y_ = 0;
}
float SC_ENTER_FIELD::pos_y() const {
  // @@protoc_insertion_point(field_get:GAME.SC_ENTER_FIELD.pos_y)
  return pos_y_;
}
void SC_ENTER_FIELD::set_pos_y(float value) {
  
  pos_y_ = value;
  // @@protoc_insertion_point(field_set:GAME.SC_ENTER_FIELD.pos_y)
}

// float pos_z = 5;
void SC_ENTER_FIELD::clear_pos_z() {
  pos_z_ = 0;
}
float SC_ENTER_FIELD::pos_z() const {
  // @@protoc_insertion_point(field_get:GAME.SC_ENTER_FIELD.pos_z)
  return pos_z_;
}
void SC_ENTER_FIELD::set_pos_z(float value) {
  
  pos_z_ = value;
  // @@protoc_insertion_point(field_set:GAME.SC_ENTER_FIELD.pos_z)
}

// string ec = 6;
void SC_ENTER_FIELD::clear_ec() {
  ec_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SC_ENTER_FIELD::ec() const {
  // @@protoc_insertion_point(field_get:GAME.SC_ENTER_FIELD.ec)
  return ec_.GetNoArena();
}
void SC_ENTER_FIELD::set_ec(const ::std::string& value) {
  
  ec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GAME.SC_ENTER_FIELD.ec)
}
#if LANG_CXX11
void SC_ENTER_FIELD::set_ec(::std::string&& value) {
  
  ec_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GAME.SC_ENTER_FIELD.ec)
}
#endif
void SC_ENTER_FIELD::set_ec(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GAME.SC_ENTER_FIELD.ec)
}
void SC_ENTER_FIELD::set_ec(const char* value, size_t size) {
  
  ec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GAME.SC_ENTER_FIELD.ec)
}
::std::string* SC_ENTER_FIELD::mutable_ec() {
  
  // @@protoc_insertion_point(field_mutable:GAME.SC_ENTER_FIELD.ec)
  return ec_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SC_ENTER_FIELD::release_ec() {
  // @@protoc_insertion_point(field_release:GAME.SC_ENTER_FIELD.ec)
  
  return ec_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_ENTER_FIELD::set_allocated_ec(::std::string* ec) {
  if (ec != NULL) {
    
  } else {
    
  }
  ec_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ec);
  // @@protoc_insertion_point(field_set_allocated:GAME.SC_ENTER_FIELD.ec)
}

// repeated .GAME.USER_INFO user_infos = 7;
int SC_ENTER_FIELD::user_infos_size() const {
  return user_infos_.size();
}
void SC_ENTER_FIELD::clear_user_infos() {
  user_infos_.Clear();
}
const ::GAME::USER_INFO& SC_ENTER_FIELD::user_infos(int index) const {
  // @@protoc_insertion_point(field_get:GAME.SC_ENTER_FIELD.user_infos)
  return user_infos_.Get(index);
}
::GAME::USER_INFO* SC_ENTER_FIELD::mutable_user_infos(int index) {
  // @@protoc_insertion_point(field_mutable:GAME.SC_ENTER_FIELD.user_infos)
  return user_infos_.Mutable(index);
}
::GAME::USER_INFO* SC_ENTER_FIELD::add_user_infos() {
  // @@protoc_insertion_point(field_add:GAME.SC_ENTER_FIELD.user_infos)
  return user_infos_.Add();
}
::google::protobuf::RepeatedPtrField< ::GAME::USER_INFO >*
SC_ENTER_FIELD::mutable_user_infos() {
  // @@protoc_insertion_point(field_mutable_list:GAME.SC_ENTER_FIELD.user_infos)
  return &user_infos_;
}
const ::google::protobuf::RepeatedPtrField< ::GAME::USER_INFO >&
SC_ENTER_FIELD::user_infos() const {
  // @@protoc_insertion_point(field_list:GAME.SC_ENTER_FIELD.user_infos)
  return user_infos_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_NOTI_ENTER_FIELD::kKeyFieldNumber;
const int SC_NOTI_ENTER_FIELD::kHpFieldNumber;
const int SC_NOTI_ENTER_FIELD::kPosXFieldNumber;
const int SC_NOTI_ENTER_FIELD::kPosYFieldNumber;
const int SC_NOTI_ENTER_FIELD::kPosZFieldNumber;
const int SC_NOTI_ENTER_FIELD::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_NOTI_ENTER_FIELD::SC_NOTI_ENTER_FIELD()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_GAME_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GAME.SC_NOTI_ENTER_FIELD)
}
SC_NOTI_ENTER_FIELD::SC_NOTI_ENTER_FIELD(const SC_NOTI_ENTER_FIELD& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&key_, &from.key_,
    reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&key_) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:GAME.SC_NOTI_ENTER_FIELD)
}

void SC_NOTI_ENTER_FIELD::SharedCtor() {
  ::memset(&key_, 0, reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&key_) + sizeof(timestamp_));
  _cached_size_ = 0;
}

SC_NOTI_ENTER_FIELD::~SC_NOTI_ENTER_FIELD() {
  // @@protoc_insertion_point(destructor:GAME.SC_NOTI_ENTER_FIELD)
  SharedDtor();
}

void SC_NOTI_ENTER_FIELD::SharedDtor() {
}

void SC_NOTI_ENTER_FIELD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_NOTI_ENTER_FIELD::descriptor() {
  protobuf_GAME_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GAME_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_NOTI_ENTER_FIELD& SC_NOTI_ENTER_FIELD::default_instance() {
  protobuf_GAME_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_NOTI_ENTER_FIELD* SC_NOTI_ENTER_FIELD::New(::google::protobuf::Arena* arena) const {
  SC_NOTI_ENTER_FIELD* n = new SC_NOTI_ENTER_FIELD;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_NOTI_ENTER_FIELD::Clear() {
// @@protoc_insertion_point(message_clear_start:GAME.SC_NOTI_ENTER_FIELD)
  ::memset(&key_, 0, reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&key_) + sizeof(timestamp_));
}

bool SC_NOTI_ENTER_FIELD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GAME.SC_NOTI_ENTER_FIELD)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 hp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pos_x = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pos_y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pos_z = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GAME.SC_NOTI_ENTER_FIELD)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GAME.SC_NOTI_ENTER_FIELD)
  return false;
#undef DO_
}

void SC_NOTI_ENTER_FIELD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GAME.SC_NOTI_ENTER_FIELD)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 key = 1;
  if (this->key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->key(), output);
  }

  // int32 hp = 2;
  if (this->hp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hp(), output);
  }

  // float pos_x = 3;
  if (this->pos_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->pos_x(), output);
  }

  // float pos_y = 4;
  if (this->pos_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->pos_y(), output);
  }

  // float pos_z = 5;
  if (this->pos_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->pos_z(), output);
  }

  // int64 timestamp = 6;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->timestamp(), output);
  }

  // @@protoc_insertion_point(serialize_end:GAME.SC_NOTI_ENTER_FIELD)
}

::google::protobuf::uint8* SC_NOTI_ENTER_FIELD::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GAME.SC_NOTI_ENTER_FIELD)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 key = 1;
  if (this->key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->key(), target);
  }

  // int32 hp = 2;
  if (this->hp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hp(), target);
  }

  // float pos_x = 3;
  if (this->pos_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->pos_x(), target);
  }

  // float pos_y = 4;
  if (this->pos_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->pos_y(), target);
  }

  // float pos_z = 5;
  if (this->pos_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->pos_z(), target);
  }

  // int64 timestamp = 6;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->timestamp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GAME.SC_NOTI_ENTER_FIELD)
  return target;
}

size_t SC_NOTI_ENTER_FIELD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GAME.SC_NOTI_ENTER_FIELD)
  size_t total_size = 0;

  // int64 key = 1;
  if (this->key() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->key());
  }

  // int32 hp = 2;
  if (this->hp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hp());
  }

  // float pos_x = 3;
  if (this->pos_x() != 0) {
    total_size += 1 + 4;
  }

  // float pos_y = 4;
  if (this->pos_y() != 0) {
    total_size += 1 + 4;
  }

  // float pos_z = 5;
  if (this->pos_z() != 0) {
    total_size += 1 + 4;
  }

  // int64 timestamp = 6;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_NOTI_ENTER_FIELD::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GAME.SC_NOTI_ENTER_FIELD)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_NOTI_ENTER_FIELD* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_NOTI_ENTER_FIELD>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GAME.SC_NOTI_ENTER_FIELD)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GAME.SC_NOTI_ENTER_FIELD)
    MergeFrom(*source);
  }
}

void SC_NOTI_ENTER_FIELD::MergeFrom(const SC_NOTI_ENTER_FIELD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GAME.SC_NOTI_ENTER_FIELD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key() != 0) {
    set_key(from.key());
  }
  if (from.hp() != 0) {
    set_hp(from.hp());
  }
  if (from.pos_x() != 0) {
    set_pos_x(from.pos_x());
  }
  if (from.pos_y() != 0) {
    set_pos_y(from.pos_y());
  }
  if (from.pos_z() != 0) {
    set_pos_z(from.pos_z());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void SC_NOTI_ENTER_FIELD::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GAME.SC_NOTI_ENTER_FIELD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_NOTI_ENTER_FIELD::CopyFrom(const SC_NOTI_ENTER_FIELD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GAME.SC_NOTI_ENTER_FIELD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_NOTI_ENTER_FIELD::IsInitialized() const {
  return true;
}

void SC_NOTI_ENTER_FIELD::Swap(SC_NOTI_ENTER_FIELD* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_NOTI_ENTER_FIELD::InternalSwap(SC_NOTI_ENTER_FIELD* other) {
  std::swap(key_, other->key_);
  std::swap(hp_, other->hp_);
  std::swap(pos_x_, other->pos_x_);
  std::swap(pos_y_, other->pos_y_);
  std::swap(pos_z_, other->pos_z_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_NOTI_ENTER_FIELD::GetMetadata() const {
  protobuf_GAME_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GAME_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_NOTI_ENTER_FIELD

// int64 key = 1;
void SC_NOTI_ENTER_FIELD::clear_key() {
  key_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SC_NOTI_ENTER_FIELD::key() const {
  // @@protoc_insertion_point(field_get:GAME.SC_NOTI_ENTER_FIELD.key)
  return key_;
}
void SC_NOTI_ENTER_FIELD::set_key(::google::protobuf::int64 value) {
  
  key_ = value;
  // @@protoc_insertion_point(field_set:GAME.SC_NOTI_ENTER_FIELD.key)
}

// int32 hp = 2;
void SC_NOTI_ENTER_FIELD::clear_hp() {
  hp_ = 0;
}
::google::protobuf::int32 SC_NOTI_ENTER_FIELD::hp() const {
  // @@protoc_insertion_point(field_get:GAME.SC_NOTI_ENTER_FIELD.hp)
  return hp_;
}
void SC_NOTI_ENTER_FIELD::set_hp(::google::protobuf::int32 value) {
  
  hp_ = value;
  // @@protoc_insertion_point(field_set:GAME.SC_NOTI_ENTER_FIELD.hp)
}

// float pos_x = 3;
void SC_NOTI_ENTER_FIELD::clear_pos_x() {
  pos_x_ = 0;
}
float SC_NOTI_ENTER_FIELD::pos_x() const {
  // @@protoc_insertion_point(field_get:GAME.SC_NOTI_ENTER_FIELD.pos_x)
  return pos_x_;
}
void SC_NOTI_ENTER_FIELD::set_pos_x(float value) {
  
  pos_x_ = value;
  // @@protoc_insertion_point(field_set:GAME.SC_NOTI_ENTER_FIELD.pos_x)
}

// float pos_y = 4;
void SC_NOTI_ENTER_FIELD::clear_pos_y() {
  pos_y_ = 0;
}
float SC_NOTI_ENTER_FIELD::pos_y() const {
  // @@protoc_insertion_point(field_get:GAME.SC_NOTI_ENTER_FIELD.pos_y)
  return pos_y_;
}
void SC_NOTI_ENTER_FIELD::set_pos_y(float value) {
  
  pos_y_ = value;
  // @@protoc_insertion_point(field_set:GAME.SC_NOTI_ENTER_FIELD.pos_y)
}

// float pos_z = 5;
void SC_NOTI_ENTER_FIELD::clear_pos_z() {
  pos_z_ = 0;
}
float SC_NOTI_ENTER_FIELD::pos_z() const {
  // @@protoc_insertion_point(field_get:GAME.SC_NOTI_ENTER_FIELD.pos_z)
  return pos_z_;
}
void SC_NOTI_ENTER_FIELD::set_pos_z(float value) {
  
  pos_z_ = value;
  // @@protoc_insertion_point(field_set:GAME.SC_NOTI_ENTER_FIELD.pos_z)
}

// int64 timestamp = 6;
void SC_NOTI_ENTER_FIELD::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SC_NOTI_ENTER_FIELD::timestamp() const {
  // @@protoc_insertion_point(field_get:GAME.SC_NOTI_ENTER_FIELD.timestamp)
  return timestamp_;
}
void SC_NOTI_ENTER_FIELD::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:GAME.SC_NOTI_ENTER_FIELD.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_LEAVE_FIELD::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_LEAVE_FIELD::CS_LEAVE_FIELD()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_GAME_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GAME.CS_LEAVE_FIELD)
}
CS_LEAVE_FIELD::CS_LEAVE_FIELD(const CS_LEAVE_FIELD& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_ = from.key_;
  // @@protoc_insertion_point(copy_constructor:GAME.CS_LEAVE_FIELD)
}

void CS_LEAVE_FIELD::SharedCtor() {
  key_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

CS_LEAVE_FIELD::~CS_LEAVE_FIELD() {
  // @@protoc_insertion_point(destructor:GAME.CS_LEAVE_FIELD)
  SharedDtor();
}

void CS_LEAVE_FIELD::SharedDtor() {
}

void CS_LEAVE_FIELD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_LEAVE_FIELD::descriptor() {
  protobuf_GAME_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GAME_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_LEAVE_FIELD& CS_LEAVE_FIELD::default_instance() {
  protobuf_GAME_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_LEAVE_FIELD* CS_LEAVE_FIELD::New(::google::protobuf::Arena* arena) const {
  CS_LEAVE_FIELD* n = new CS_LEAVE_FIELD;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_LEAVE_FIELD::Clear() {
// @@protoc_insertion_point(message_clear_start:GAME.CS_LEAVE_FIELD)
  key_ = GOOGLE_LONGLONG(0);
}

bool CS_LEAVE_FIELD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GAME.CS_LEAVE_FIELD)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GAME.CS_LEAVE_FIELD)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GAME.CS_LEAVE_FIELD)
  return false;
#undef DO_
}

void CS_LEAVE_FIELD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GAME.CS_LEAVE_FIELD)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 key = 1;
  if (this->key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->key(), output);
  }

  // @@protoc_insertion_point(serialize_end:GAME.CS_LEAVE_FIELD)
}

::google::protobuf::uint8* CS_LEAVE_FIELD::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GAME.CS_LEAVE_FIELD)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 key = 1;
  if (this->key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->key(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GAME.CS_LEAVE_FIELD)
  return target;
}

size_t CS_LEAVE_FIELD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GAME.CS_LEAVE_FIELD)
  size_t total_size = 0;

  // int64 key = 1;
  if (this->key() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_LEAVE_FIELD::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GAME.CS_LEAVE_FIELD)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_LEAVE_FIELD* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_LEAVE_FIELD>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GAME.CS_LEAVE_FIELD)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GAME.CS_LEAVE_FIELD)
    MergeFrom(*source);
  }
}

void CS_LEAVE_FIELD::MergeFrom(const CS_LEAVE_FIELD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GAME.CS_LEAVE_FIELD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key() != 0) {
    set_key(from.key());
  }
}

void CS_LEAVE_FIELD::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GAME.CS_LEAVE_FIELD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_LEAVE_FIELD::CopyFrom(const CS_LEAVE_FIELD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GAME.CS_LEAVE_FIELD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_LEAVE_FIELD::IsInitialized() const {
  return true;
}

void CS_LEAVE_FIELD::Swap(CS_LEAVE_FIELD* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_LEAVE_FIELD::InternalSwap(CS_LEAVE_FIELD* other) {
  std::swap(key_, other->key_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_LEAVE_FIELD::GetMetadata() const {
  protobuf_GAME_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GAME_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_LEAVE_FIELD

// int64 key = 1;
void CS_LEAVE_FIELD::clear_key() {
  key_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 CS_LEAVE_FIELD::key() const {
  // @@protoc_insertion_point(field_get:GAME.CS_LEAVE_FIELD.key)
  return key_;
}
void CS_LEAVE_FIELD::set_key(::google::protobuf::int64 value) {
  
  key_ = value;
  // @@protoc_insertion_point(field_set:GAME.CS_LEAVE_FIELD.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_NOTI_LEAVE_FIELD::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_NOTI_LEAVE_FIELD::SC_NOTI_LEAVE_FIELD()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_GAME_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GAME.SC_NOTI_LEAVE_FIELD)
}
SC_NOTI_LEAVE_FIELD::SC_NOTI_LEAVE_FIELD(const SC_NOTI_LEAVE_FIELD& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_ = from.key_;
  // @@protoc_insertion_point(copy_constructor:GAME.SC_NOTI_LEAVE_FIELD)
}

void SC_NOTI_LEAVE_FIELD::SharedCtor() {
  key_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

SC_NOTI_LEAVE_FIELD::~SC_NOTI_LEAVE_FIELD() {
  // @@protoc_insertion_point(destructor:GAME.SC_NOTI_LEAVE_FIELD)
  SharedDtor();
}

void SC_NOTI_LEAVE_FIELD::SharedDtor() {
}

void SC_NOTI_LEAVE_FIELD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_NOTI_LEAVE_FIELD::descriptor() {
  protobuf_GAME_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GAME_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_NOTI_LEAVE_FIELD& SC_NOTI_LEAVE_FIELD::default_instance() {
  protobuf_GAME_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_NOTI_LEAVE_FIELD* SC_NOTI_LEAVE_FIELD::New(::google::protobuf::Arena* arena) const {
  SC_NOTI_LEAVE_FIELD* n = new SC_NOTI_LEAVE_FIELD;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_NOTI_LEAVE_FIELD::Clear() {
// @@protoc_insertion_point(message_clear_start:GAME.SC_NOTI_LEAVE_FIELD)
  key_ = GOOGLE_LONGLONG(0);
}

bool SC_NOTI_LEAVE_FIELD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GAME.SC_NOTI_LEAVE_FIELD)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GAME.SC_NOTI_LEAVE_FIELD)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GAME.SC_NOTI_LEAVE_FIELD)
  return false;
#undef DO_
}

void SC_NOTI_LEAVE_FIELD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GAME.SC_NOTI_LEAVE_FIELD)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 key = 1;
  if (this->key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->key(), output);
  }

  // @@protoc_insertion_point(serialize_end:GAME.SC_NOTI_LEAVE_FIELD)
}

::google::protobuf::uint8* SC_NOTI_LEAVE_FIELD::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GAME.SC_NOTI_LEAVE_FIELD)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 key = 1;
  if (this->key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->key(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GAME.SC_NOTI_LEAVE_FIELD)
  return target;
}

size_t SC_NOTI_LEAVE_FIELD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GAME.SC_NOTI_LEAVE_FIELD)
  size_t total_size = 0;

  // int64 key = 1;
  if (this->key() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_NOTI_LEAVE_FIELD::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GAME.SC_NOTI_LEAVE_FIELD)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_NOTI_LEAVE_FIELD* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_NOTI_LEAVE_FIELD>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GAME.SC_NOTI_LEAVE_FIELD)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GAME.SC_NOTI_LEAVE_FIELD)
    MergeFrom(*source);
  }
}

void SC_NOTI_LEAVE_FIELD::MergeFrom(const SC_NOTI_LEAVE_FIELD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GAME.SC_NOTI_LEAVE_FIELD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key() != 0) {
    set_key(from.key());
  }
}

void SC_NOTI_LEAVE_FIELD::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GAME.SC_NOTI_LEAVE_FIELD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_NOTI_LEAVE_FIELD::CopyFrom(const SC_NOTI_LEAVE_FIELD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GAME.SC_NOTI_LEAVE_FIELD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_NOTI_LEAVE_FIELD::IsInitialized() const {
  return true;
}

void SC_NOTI_LEAVE_FIELD::Swap(SC_NOTI_LEAVE_FIELD* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_NOTI_LEAVE_FIELD::InternalSwap(SC_NOTI_LEAVE_FIELD* other) {
  std::swap(key_, other->key_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_NOTI_LEAVE_FIELD::GetMetadata() const {
  protobuf_GAME_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GAME_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_NOTI_LEAVE_FIELD

// int64 key = 1;
void SC_NOTI_LEAVE_FIELD::clear_key() {
  key_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SC_NOTI_LEAVE_FIELD::key() const {
  // @@protoc_insertion_point(field_get:GAME.SC_NOTI_LEAVE_FIELD.key)
  return key_;
}
void SC_NOTI_LEAVE_FIELD::set_key(::google::protobuf::int64 value) {
  
  key_ = value;
  // @@protoc_insertion_point(field_set:GAME.SC_NOTI_LEAVE_FIELD.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_MOVE_OBJECT::kPosXFieldNumber;
const int CS_MOVE_OBJECT::kPosYFieldNumber;
const int CS_MOVE_OBJECT::kPosZFieldNumber;
const int CS_MOVE_OBJECT::kRotXFieldNumber;
const int CS_MOVE_OBJECT::kRotYFieldNumber;
const int CS_MOVE_OBJECT::kRotZFieldNumber;
const int CS_MOVE_OBJECT::kRotWFieldNumber;
const int CS_MOVE_OBJECT::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_MOVE_OBJECT::CS_MOVE_OBJECT()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_GAME_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GAME.CS_MOVE_OBJECT)
}
CS_MOVE_OBJECT::CS_MOVE_OBJECT(const CS_MOVE_OBJECT& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pos_x_, &from.pos_x_,
    reinterpret_cast<char*>(&rot_w_) -
    reinterpret_cast<char*>(&pos_x_) + sizeof(rot_w_));
  // @@protoc_insertion_point(copy_constructor:GAME.CS_MOVE_OBJECT)
}

void CS_MOVE_OBJECT::SharedCtor() {
  ::memset(&pos_x_, 0, reinterpret_cast<char*>(&rot_w_) -
    reinterpret_cast<char*>(&pos_x_) + sizeof(rot_w_));
  _cached_size_ = 0;
}

CS_MOVE_OBJECT::~CS_MOVE_OBJECT() {
  // @@protoc_insertion_point(destructor:GAME.CS_MOVE_OBJECT)
  SharedDtor();
}

void CS_MOVE_OBJECT::SharedDtor() {
}

void CS_MOVE_OBJECT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_MOVE_OBJECT::descriptor() {
  protobuf_GAME_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GAME_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_MOVE_OBJECT& CS_MOVE_OBJECT::default_instance() {
  protobuf_GAME_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_MOVE_OBJECT* CS_MOVE_OBJECT::New(::google::protobuf::Arena* arena) const {
  CS_MOVE_OBJECT* n = new CS_MOVE_OBJECT;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_MOVE_OBJECT::Clear() {
// @@protoc_insertion_point(message_clear_start:GAME.CS_MOVE_OBJECT)
  ::memset(&pos_x_, 0, reinterpret_cast<char*>(&rot_w_) -
    reinterpret_cast<char*>(&pos_x_) + sizeof(rot_w_));
}

bool CS_MOVE_OBJECT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GAME.CS_MOVE_OBJECT)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float pos_x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pos_y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pos_z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rot_x = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rot_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rot_y = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rot_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rot_z = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rot_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rot_w = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rot_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GAME.CS_MOVE_OBJECT)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GAME.CS_MOVE_OBJECT)
  return false;
#undef DO_
}

void CS_MOVE_OBJECT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GAME.CS_MOVE_OBJECT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float pos_x = 1;
  if (this->pos_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->pos_x(), output);
  }

  // float pos_y = 2;
  if (this->pos_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->pos_y(), output);
  }

  // float pos_z = 3;
  if (this->pos_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->pos_z(), output);
  }

  // float rot_x = 4;
  if (this->rot_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->rot_x(), output);
  }

  // float rot_y = 5;
  if (this->rot_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->rot_y(), output);
  }

  // float rot_z = 6;
  if (this->rot_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->rot_z(), output);
  }

  // float rot_w = 7;
  if (this->rot_w() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->rot_w(), output);
  }

  // int64 timestamp = 8;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->timestamp(), output);
  }

  // @@protoc_insertion_point(serialize_end:GAME.CS_MOVE_OBJECT)
}

::google::protobuf::uint8* CS_MOVE_OBJECT::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GAME.CS_MOVE_OBJECT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float pos_x = 1;
  if (this->pos_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->pos_x(), target);
  }

  // float pos_y = 2;
  if (this->pos_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->pos_y(), target);
  }

  // float pos_z = 3;
  if (this->pos_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->pos_z(), target);
  }

  // float rot_x = 4;
  if (this->rot_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->rot_x(), target);
  }

  // float rot_y = 5;
  if (this->rot_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->rot_y(), target);
  }

  // float rot_z = 6;
  if (this->rot_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->rot_z(), target);
  }

  // float rot_w = 7;
  if (this->rot_w() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->rot_w(), target);
  }

  // int64 timestamp = 8;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->timestamp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GAME.CS_MOVE_OBJECT)
  return target;
}

size_t CS_MOVE_OBJECT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GAME.CS_MOVE_OBJECT)
  size_t total_size = 0;

  // float pos_x = 1;
  if (this->pos_x() != 0) {
    total_size += 1 + 4;
  }

  // float pos_y = 2;
  if (this->pos_y() != 0) {
    total_size += 1 + 4;
  }

  // float pos_z = 3;
  if (this->pos_z() != 0) {
    total_size += 1 + 4;
  }

  // float rot_x = 4;
  if (this->rot_x() != 0) {
    total_size += 1 + 4;
  }

  // float rot_y = 5;
  if (this->rot_y() != 0) {
    total_size += 1 + 4;
  }

  // float rot_z = 6;
  if (this->rot_z() != 0) {
    total_size += 1 + 4;
  }

  // int64 timestamp = 8;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // float rot_w = 7;
  if (this->rot_w() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_MOVE_OBJECT::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GAME.CS_MOVE_OBJECT)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_MOVE_OBJECT* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_MOVE_OBJECT>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GAME.CS_MOVE_OBJECT)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GAME.CS_MOVE_OBJECT)
    MergeFrom(*source);
  }
}

void CS_MOVE_OBJECT::MergeFrom(const CS_MOVE_OBJECT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GAME.CS_MOVE_OBJECT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pos_x() != 0) {
    set_pos_x(from.pos_x());
  }
  if (from.pos_y() != 0) {
    set_pos_y(from.pos_y());
  }
  if (from.pos_z() != 0) {
    set_pos_z(from.pos_z());
  }
  if (from.rot_x() != 0) {
    set_rot_x(from.rot_x());
  }
  if (from.rot_y() != 0) {
    set_rot_y(from.rot_y());
  }
  if (from.rot_z() != 0) {
    set_rot_z(from.rot_z());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.rot_w() != 0) {
    set_rot_w(from.rot_w());
  }
}

void CS_MOVE_OBJECT::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GAME.CS_MOVE_OBJECT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_MOVE_OBJECT::CopyFrom(const CS_MOVE_OBJECT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GAME.CS_MOVE_OBJECT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_MOVE_OBJECT::IsInitialized() const {
  return true;
}

void CS_MOVE_OBJECT::Swap(CS_MOVE_OBJECT* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_MOVE_OBJECT::InternalSwap(CS_MOVE_OBJECT* other) {
  std::swap(pos_x_, other->pos_x_);
  std::swap(pos_y_, other->pos_y_);
  std::swap(pos_z_, other->pos_z_);
  std::swap(rot_x_, other->rot_x_);
  std::swap(rot_y_, other->rot_y_);
  std::swap(rot_z_, other->rot_z_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(rot_w_, other->rot_w_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_MOVE_OBJECT::GetMetadata() const {
  protobuf_GAME_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GAME_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_MOVE_OBJECT

// float pos_x = 1;
void CS_MOVE_OBJECT::clear_pos_x() {
  pos_x_ = 0;
}
float CS_MOVE_OBJECT::pos_x() const {
  // @@protoc_insertion_point(field_get:GAME.CS_MOVE_OBJECT.pos_x)
  return pos_x_;
}
void CS_MOVE_OBJECT::set_pos_x(float value) {
  
  pos_x_ = value;
  // @@protoc_insertion_point(field_set:GAME.CS_MOVE_OBJECT.pos_x)
}

// float pos_y = 2;
void CS_MOVE_OBJECT::clear_pos_y() {
  pos_y_ = 0;
}
float CS_MOVE_OBJECT::pos_y() const {
  // @@protoc_insertion_point(field_get:GAME.CS_MOVE_OBJECT.pos_y)
  return pos_y_;
}
void CS_MOVE_OBJECT::set_pos_y(float value) {
  
  pos_y_ = value;
  // @@protoc_insertion_point(field_set:GAME.CS_MOVE_OBJECT.pos_y)
}

// float pos_z = 3;
void CS_MOVE_OBJECT::clear_pos_z() {
  pos_z_ = 0;
}
float CS_MOVE_OBJECT::pos_z() const {
  // @@protoc_insertion_point(field_get:GAME.CS_MOVE_OBJECT.pos_z)
  return pos_z_;
}
void CS_MOVE_OBJECT::set_pos_z(float value) {
  
  pos_z_ = value;
  // @@protoc_insertion_point(field_set:GAME.CS_MOVE_OBJECT.pos_z)
}

// float rot_x = 4;
void CS_MOVE_OBJECT::clear_rot_x() {
  rot_x_ = 0;
}
float CS_MOVE_OBJECT::rot_x() const {
  // @@protoc_insertion_point(field_get:GAME.CS_MOVE_OBJECT.rot_x)
  return rot_x_;
}
void CS_MOVE_OBJECT::set_rot_x(float value) {
  
  rot_x_ = value;
  // @@protoc_insertion_point(field_set:GAME.CS_MOVE_OBJECT.rot_x)
}

// float rot_y = 5;
void CS_MOVE_OBJECT::clear_rot_y() {
  rot_y_ = 0;
}
float CS_MOVE_OBJECT::rot_y() const {
  // @@protoc_insertion_point(field_get:GAME.CS_MOVE_OBJECT.rot_y)
  return rot_y_;
}
void CS_MOVE_OBJECT::set_rot_y(float value) {
  
  rot_y_ = value;
  // @@protoc_insertion_point(field_set:GAME.CS_MOVE_OBJECT.rot_y)
}

// float rot_z = 6;
void CS_MOVE_OBJECT::clear_rot_z() {
  rot_z_ = 0;
}
float CS_MOVE_OBJECT::rot_z() const {
  // @@protoc_insertion_point(field_get:GAME.CS_MOVE_OBJECT.rot_z)
  return rot_z_;
}
void CS_MOVE_OBJECT::set_rot_z(float value) {
  
  rot_z_ = value;
  // @@protoc_insertion_point(field_set:GAME.CS_MOVE_OBJECT.rot_z)
}

// float rot_w = 7;
void CS_MOVE_OBJECT::clear_rot_w() {
  rot_w_ = 0;
}
float CS_MOVE_OBJECT::rot_w() const {
  // @@protoc_insertion_point(field_get:GAME.CS_MOVE_OBJECT.rot_w)
  return rot_w_;
}
void CS_MOVE_OBJECT::set_rot_w(float value) {
  
  rot_w_ = value;
  // @@protoc_insertion_point(field_set:GAME.CS_MOVE_OBJECT.rot_w)
}

// int64 timestamp = 8;
void CS_MOVE_OBJECT::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 CS_MOVE_OBJECT::timestamp() const {
  // @@protoc_insertion_point(field_get:GAME.CS_MOVE_OBJECT.timestamp)
  return timestamp_;
}
void CS_MOVE_OBJECT::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:GAME.CS_MOVE_OBJECT.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_NOTI_MOVE_OBJECT::kKeyFieldNumber;
const int SC_NOTI_MOVE_OBJECT::kPosXFieldNumber;
const int SC_NOTI_MOVE_OBJECT::kPosYFieldNumber;
const int SC_NOTI_MOVE_OBJECT::kPosZFieldNumber;
const int SC_NOTI_MOVE_OBJECT::kRotXFieldNumber;
const int SC_NOTI_MOVE_OBJECT::kRotYFieldNumber;
const int SC_NOTI_MOVE_OBJECT::kRotZFieldNumber;
const int SC_NOTI_MOVE_OBJECT::kRotWFieldNumber;
const int SC_NOTI_MOVE_OBJECT::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_NOTI_MOVE_OBJECT::SC_NOTI_MOVE_OBJECT()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_GAME_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GAME.SC_NOTI_MOVE_OBJECT)
}
SC_NOTI_MOVE_OBJECT::SC_NOTI_MOVE_OBJECT(const SC_NOTI_MOVE_OBJECT& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&key_, &from.key_,
    reinterpret_cast<char*>(&rot_w_) -
    reinterpret_cast<char*>(&key_) + sizeof(rot_w_));
  // @@protoc_insertion_point(copy_constructor:GAME.SC_NOTI_MOVE_OBJECT)
}

void SC_NOTI_MOVE_OBJECT::SharedCtor() {
  ::memset(&key_, 0, reinterpret_cast<char*>(&rot_w_) -
    reinterpret_cast<char*>(&key_) + sizeof(rot_w_));
  _cached_size_ = 0;
}

SC_NOTI_MOVE_OBJECT::~SC_NOTI_MOVE_OBJECT() {
  // @@protoc_insertion_point(destructor:GAME.SC_NOTI_MOVE_OBJECT)
  SharedDtor();
}

void SC_NOTI_MOVE_OBJECT::SharedDtor() {
}

void SC_NOTI_MOVE_OBJECT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_NOTI_MOVE_OBJECT::descriptor() {
  protobuf_GAME_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GAME_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_NOTI_MOVE_OBJECT& SC_NOTI_MOVE_OBJECT::default_instance() {
  protobuf_GAME_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_NOTI_MOVE_OBJECT* SC_NOTI_MOVE_OBJECT::New(::google::protobuf::Arena* arena) const {
  SC_NOTI_MOVE_OBJECT* n = new SC_NOTI_MOVE_OBJECT;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_NOTI_MOVE_OBJECT::Clear() {
// @@protoc_insertion_point(message_clear_start:GAME.SC_NOTI_MOVE_OBJECT)
  ::memset(&key_, 0, reinterpret_cast<char*>(&rot_w_) -
    reinterpret_cast<char*>(&key_) + sizeof(rot_w_));
}

bool SC_NOTI_MOVE_OBJECT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GAME.SC_NOTI_MOVE_OBJECT)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pos_x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pos_y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pos_z = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rot_x = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rot_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rot_y = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rot_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rot_z = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rot_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rot_w = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rot_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GAME.SC_NOTI_MOVE_OBJECT)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GAME.SC_NOTI_MOVE_OBJECT)
  return false;
#undef DO_
}

void SC_NOTI_MOVE_OBJECT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GAME.SC_NOTI_MOVE_OBJECT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 key = 1;
  if (this->key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->key(), output);
  }

  // float pos_x = 2;
  if (this->pos_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->pos_x(), output);
  }

  // float pos_y = 3;
  if (this->pos_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->pos_y(), output);
  }

  // float pos_z = 4;
  if (this->pos_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->pos_z(), output);
  }

  // float rot_x = 5;
  if (this->rot_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->rot_x(), output);
  }

  // float rot_y = 6;
  if (this->rot_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->rot_y(), output);
  }

  // float rot_z = 7;
  if (this->rot_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->rot_z(), output);
  }

  // float rot_w = 8;
  if (this->rot_w() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->rot_w(), output);
  }

  // int64 timestamp = 9;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->timestamp(), output);
  }

  // @@protoc_insertion_point(serialize_end:GAME.SC_NOTI_MOVE_OBJECT)
}

::google::protobuf::uint8* SC_NOTI_MOVE_OBJECT::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GAME.SC_NOTI_MOVE_OBJECT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 key = 1;
  if (this->key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->key(), target);
  }

  // float pos_x = 2;
  if (this->pos_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->pos_x(), target);
  }

  // float pos_y = 3;
  if (this->pos_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->pos_y(), target);
  }

  // float pos_z = 4;
  if (this->pos_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->pos_z(), target);
  }

  // float rot_x = 5;
  if (this->rot_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->rot_x(), target);
  }

  // float rot_y = 6;
  if (this->rot_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->rot_y(), target);
  }

  // float rot_z = 7;
  if (this->rot_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->rot_z(), target);
  }

  // float rot_w = 8;
  if (this->rot_w() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->rot_w(), target);
  }

  // int64 timestamp = 9;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->timestamp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GAME.SC_NOTI_MOVE_OBJECT)
  return target;
}

size_t SC_NOTI_MOVE_OBJECT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GAME.SC_NOTI_MOVE_OBJECT)
  size_t total_size = 0;

  // int64 key = 1;
  if (this->key() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->key());
  }

  // float pos_x = 2;
  if (this->pos_x() != 0) {
    total_size += 1 + 4;
  }

  // float pos_y = 3;
  if (this->pos_y() != 0) {
    total_size += 1 + 4;
  }

  // float pos_z = 4;
  if (this->pos_z() != 0) {
    total_size += 1 + 4;
  }

  // float rot_x = 5;
  if (this->rot_x() != 0) {
    total_size += 1 + 4;
  }

  // float rot_y = 6;
  if (this->rot_y() != 0) {
    total_size += 1 + 4;
  }

  // float rot_z = 7;
  if (this->rot_z() != 0) {
    total_size += 1 + 4;
  }

  // int64 timestamp = 9;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // float rot_w = 8;
  if (this->rot_w() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_NOTI_MOVE_OBJECT::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GAME.SC_NOTI_MOVE_OBJECT)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_NOTI_MOVE_OBJECT* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_NOTI_MOVE_OBJECT>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GAME.SC_NOTI_MOVE_OBJECT)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GAME.SC_NOTI_MOVE_OBJECT)
    MergeFrom(*source);
  }
}

void SC_NOTI_MOVE_OBJECT::MergeFrom(const SC_NOTI_MOVE_OBJECT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GAME.SC_NOTI_MOVE_OBJECT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key() != 0) {
    set_key(from.key());
  }
  if (from.pos_x() != 0) {
    set_pos_x(from.pos_x());
  }
  if (from.pos_y() != 0) {
    set_pos_y(from.pos_y());
  }
  if (from.pos_z() != 0) {
    set_pos_z(from.pos_z());
  }
  if (from.rot_x() != 0) {
    set_rot_x(from.rot_x());
  }
  if (from.rot_y() != 0) {
    set_rot_y(from.rot_y());
  }
  if (from.rot_z() != 0) {
    set_rot_z(from.rot_z());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.rot_w() != 0) {
    set_rot_w(from.rot_w());
  }
}

void SC_NOTI_MOVE_OBJECT::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GAME.SC_NOTI_MOVE_OBJECT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_NOTI_MOVE_OBJECT::CopyFrom(const SC_NOTI_MOVE_OBJECT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GAME.SC_NOTI_MOVE_OBJECT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_NOTI_MOVE_OBJECT::IsInitialized() const {
  return true;
}

void SC_NOTI_MOVE_OBJECT::Swap(SC_NOTI_MOVE_OBJECT* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_NOTI_MOVE_OBJECT::InternalSwap(SC_NOTI_MOVE_OBJECT* other) {
  std::swap(key_, other->key_);
  std::swap(pos_x_, other->pos_x_);
  std::swap(pos_y_, other->pos_y_);
  std::swap(pos_z_, other->pos_z_);
  std::swap(rot_x_, other->rot_x_);
  std::swap(rot_y_, other->rot_y_);
  std::swap(rot_z_, other->rot_z_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(rot_w_, other->rot_w_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_NOTI_MOVE_OBJECT::GetMetadata() const {
  protobuf_GAME_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GAME_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_NOTI_MOVE_OBJECT

// int64 key = 1;
void SC_NOTI_MOVE_OBJECT::clear_key() {
  key_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SC_NOTI_MOVE_OBJECT::key() const {
  // @@protoc_insertion_point(field_get:GAME.SC_NOTI_MOVE_OBJECT.key)
  return key_;
}
void SC_NOTI_MOVE_OBJECT::set_key(::google::protobuf::int64 value) {
  
  key_ = value;
  // @@protoc_insertion_point(field_set:GAME.SC_NOTI_MOVE_OBJECT.key)
}

// float pos_x = 2;
void SC_NOTI_MOVE_OBJECT::clear_pos_x() {
  pos_x_ = 0;
}
float SC_NOTI_MOVE_OBJECT::pos_x() const {
  // @@protoc_insertion_point(field_get:GAME.SC_NOTI_MOVE_OBJECT.pos_x)
  return pos_x_;
}
void SC_NOTI_MOVE_OBJECT::set_pos_x(float value) {
  
  pos_x_ = value;
  // @@protoc_insertion_point(field_set:GAME.SC_NOTI_MOVE_OBJECT.pos_x)
}

// float pos_y = 3;
void SC_NOTI_MOVE_OBJECT::clear_pos_y() {
  pos_y_ = 0;
}
float SC_NOTI_MOVE_OBJECT::pos_y() const {
  // @@protoc_insertion_point(field_get:GAME.SC_NOTI_MOVE_OBJECT.pos_y)
  return pos_y_;
}
void SC_NOTI_MOVE_OBJECT::set_pos_y(float value) {
  
  pos_y_ = value;
  // @@protoc_insertion_point(field_set:GAME.SC_NOTI_MOVE_OBJECT.pos_y)
}

// float pos_z = 4;
void SC_NOTI_MOVE_OBJECT::clear_pos_z() {
  pos_z_ = 0;
}
float SC_NOTI_MOVE_OBJECT::pos_z() const {
  // @@protoc_insertion_point(field_get:GAME.SC_NOTI_MOVE_OBJECT.pos_z)
  return pos_z_;
}
void SC_NOTI_MOVE_OBJECT::set_pos_z(float value) {
  
  pos_z_ = value;
  // @@protoc_insertion_point(field_set:GAME.SC_NOTI_MOVE_OBJECT.pos_z)
}

// float rot_x = 5;
void SC_NOTI_MOVE_OBJECT::clear_rot_x() {
  rot_x_ = 0;
}
float SC_NOTI_MOVE_OBJECT::rot_x() const {
  // @@protoc_insertion_point(field_get:GAME.SC_NOTI_MOVE_OBJECT.rot_x)
  return rot_x_;
}
void SC_NOTI_MOVE_OBJECT::set_rot_x(float value) {
  
  rot_x_ = value;
  // @@protoc_insertion_point(field_set:GAME.SC_NOTI_MOVE_OBJECT.rot_x)
}

// float rot_y = 6;
void SC_NOTI_MOVE_OBJECT::clear_rot_y() {
  rot_y_ = 0;
}
float SC_NOTI_MOVE_OBJECT::rot_y() const {
  // @@protoc_insertion_point(field_get:GAME.SC_NOTI_MOVE_OBJECT.rot_y)
  return rot_y_;
}
void SC_NOTI_MOVE_OBJECT::set_rot_y(float value) {
  
  rot_y_ = value;
  // @@protoc_insertion_point(field_set:GAME.SC_NOTI_MOVE_OBJECT.rot_y)
}

// float rot_z = 7;
void SC_NOTI_MOVE_OBJECT::clear_rot_z() {
  rot_z_ = 0;
}
float SC_NOTI_MOVE_OBJECT::rot_z() const {
  // @@protoc_insertion_point(field_get:GAME.SC_NOTI_MOVE_OBJECT.rot_z)
  return rot_z_;
}
void SC_NOTI_MOVE_OBJECT::set_rot_z(float value) {
  
  rot_z_ = value;
  // @@protoc_insertion_point(field_set:GAME.SC_NOTI_MOVE_OBJECT.rot_z)
}

// float rot_w = 8;
void SC_NOTI_MOVE_OBJECT::clear_rot_w() {
  rot_w_ = 0;
}
float SC_NOTI_MOVE_OBJECT::rot_w() const {
  // @@protoc_insertion_point(field_get:GAME.SC_NOTI_MOVE_OBJECT.rot_w)
  return rot_w_;
}
void SC_NOTI_MOVE_OBJECT::set_rot_w(float value) {
  
  rot_w_ = value;
  // @@protoc_insertion_point(field_set:GAME.SC_NOTI_MOVE_OBJECT.rot_w)
}

// int64 timestamp = 9;
void SC_NOTI_MOVE_OBJECT::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SC_NOTI_MOVE_OBJECT::timestamp() const {
  // @@protoc_insertion_point(field_get:GAME.SC_NOTI_MOVE_OBJECT.timestamp)
  return timestamp_;
}
void SC_NOTI_MOVE_OBJECT::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:GAME.SC_NOTI_MOVE_OBJECT.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_USE_SKILL::kSkillIdFieldNumber;
const int CS_USE_SKILL::kForwardXFieldNumber;
const int CS_USE_SKILL::kForwardYFieldNumber;
const int CS_USE_SKILL::kForwardZFieldNumber;
const int CS_USE_SKILL::kRotXFieldNumber;
const int CS_USE_SKILL::kRotYFieldNumber;
const int CS_USE_SKILL::kRotZFieldNumber;
const int CS_USE_SKILL::kRotWFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_USE_SKILL::CS_USE_SKILL()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_GAME_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GAME.CS_USE_SKILL)
}
CS_USE_SKILL::CS_USE_SKILL(const CS_USE_SKILL& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&skill_id_, &from.skill_id_,
    reinterpret_cast<char*>(&rot_w_) -
    reinterpret_cast<char*>(&skill_id_) + sizeof(rot_w_));
  // @@protoc_insertion_point(copy_constructor:GAME.CS_USE_SKILL)
}

void CS_USE_SKILL::SharedCtor() {
  ::memset(&skill_id_, 0, reinterpret_cast<char*>(&rot_w_) -
    reinterpret_cast<char*>(&skill_id_) + sizeof(rot_w_));
  _cached_size_ = 0;
}

CS_USE_SKILL::~CS_USE_SKILL() {
  // @@protoc_insertion_point(destructor:GAME.CS_USE_SKILL)
  SharedDtor();
}

void CS_USE_SKILL::SharedDtor() {
}

void CS_USE_SKILL::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_USE_SKILL::descriptor() {
  protobuf_GAME_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GAME_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_USE_SKILL& CS_USE_SKILL::default_instance() {
  protobuf_GAME_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_USE_SKILL* CS_USE_SKILL::New(::google::protobuf::Arena* arena) const {
  CS_USE_SKILL* n = new CS_USE_SKILL;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_USE_SKILL::Clear() {
// @@protoc_insertion_point(message_clear_start:GAME.CS_USE_SKILL)
  ::memset(&skill_id_, 0, reinterpret_cast<char*>(&rot_w_) -
    reinterpret_cast<char*>(&skill_id_) + sizeof(rot_w_));
}

bool CS_USE_SKILL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GAME.CS_USE_SKILL)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 skill_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float forward_x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &forward_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float forward_y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &forward_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float forward_z = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &forward_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rot_x = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rot_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rot_y = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rot_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rot_z = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rot_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rot_w = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rot_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GAME.CS_USE_SKILL)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GAME.CS_USE_SKILL)
  return false;
#undef DO_
}

void CS_USE_SKILL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GAME.CS_USE_SKILL)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 skill_id = 1;
  if (this->skill_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skill_id(), output);
  }

  // float forward_x = 2;
  if (this->forward_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->forward_x(), output);
  }

  // float forward_y = 3;
  if (this->forward_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->forward_y(), output);
  }

  // float forward_z = 4;
  if (this->forward_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->forward_z(), output);
  }

  // float rot_x = 5;
  if (this->rot_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->rot_x(), output);
  }

  // float rot_y = 6;
  if (this->rot_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->rot_y(), output);
  }

  // float rot_z = 7;
  if (this->rot_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->rot_z(), output);
  }

  // float rot_w = 8;
  if (this->rot_w() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->rot_w(), output);
  }

  // @@protoc_insertion_point(serialize_end:GAME.CS_USE_SKILL)
}

::google::protobuf::uint8* CS_USE_SKILL::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GAME.CS_USE_SKILL)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 skill_id = 1;
  if (this->skill_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skill_id(), target);
  }

  // float forward_x = 2;
  if (this->forward_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->forward_x(), target);
  }

  // float forward_y = 3;
  if (this->forward_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->forward_y(), target);
  }

  // float forward_z = 4;
  if (this->forward_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->forward_z(), target);
  }

  // float rot_x = 5;
  if (this->rot_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->rot_x(), target);
  }

  // float rot_y = 6;
  if (this->rot_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->rot_y(), target);
  }

  // float rot_z = 7;
  if (this->rot_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->rot_z(), target);
  }

  // float rot_w = 8;
  if (this->rot_w() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->rot_w(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GAME.CS_USE_SKILL)
  return target;
}

size_t CS_USE_SKILL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GAME.CS_USE_SKILL)
  size_t total_size = 0;

  // int32 skill_id = 1;
  if (this->skill_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->skill_id());
  }

  // float forward_x = 2;
  if (this->forward_x() != 0) {
    total_size += 1 + 4;
  }

  // float forward_y = 3;
  if (this->forward_y() != 0) {
    total_size += 1 + 4;
  }

  // float forward_z = 4;
  if (this->forward_z() != 0) {
    total_size += 1 + 4;
  }

  // float rot_x = 5;
  if (this->rot_x() != 0) {
    total_size += 1 + 4;
  }

  // float rot_y = 6;
  if (this->rot_y() != 0) {
    total_size += 1 + 4;
  }

  // float rot_z = 7;
  if (this->rot_z() != 0) {
    total_size += 1 + 4;
  }

  // float rot_w = 8;
  if (this->rot_w() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_USE_SKILL::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GAME.CS_USE_SKILL)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_USE_SKILL* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_USE_SKILL>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GAME.CS_USE_SKILL)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GAME.CS_USE_SKILL)
    MergeFrom(*source);
  }
}

void CS_USE_SKILL::MergeFrom(const CS_USE_SKILL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GAME.CS_USE_SKILL)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.skill_id() != 0) {
    set_skill_id(from.skill_id());
  }
  if (from.forward_x() != 0) {
    set_forward_x(from.forward_x());
  }
  if (from.forward_y() != 0) {
    set_forward_y(from.forward_y());
  }
  if (from.forward_z() != 0) {
    set_forward_z(from.forward_z());
  }
  if (from.rot_x() != 0) {
    set_rot_x(from.rot_x());
  }
  if (from.rot_y() != 0) {
    set_rot_y(from.rot_y());
  }
  if (from.rot_z() != 0) {
    set_rot_z(from.rot_z());
  }
  if (from.rot_w() != 0) {
    set_rot_w(from.rot_w());
  }
}

void CS_USE_SKILL::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GAME.CS_USE_SKILL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_USE_SKILL::CopyFrom(const CS_USE_SKILL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GAME.CS_USE_SKILL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_USE_SKILL::IsInitialized() const {
  return true;
}

void CS_USE_SKILL::Swap(CS_USE_SKILL* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_USE_SKILL::InternalSwap(CS_USE_SKILL* other) {
  std::swap(skill_id_, other->skill_id_);
  std::swap(forward_x_, other->forward_x_);
  std::swap(forward_y_, other->forward_y_);
  std::swap(forward_z_, other->forward_z_);
  std::swap(rot_x_, other->rot_x_);
  std::swap(rot_y_, other->rot_y_);
  std::swap(rot_z_, other->rot_z_);
  std::swap(rot_w_, other->rot_w_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_USE_SKILL::GetMetadata() const {
  protobuf_GAME_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GAME_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_USE_SKILL

// int32 skill_id = 1;
void CS_USE_SKILL::clear_skill_id() {
  skill_id_ = 0;
}
::google::protobuf::int32 CS_USE_SKILL::skill_id() const {
  // @@protoc_insertion_point(field_get:GAME.CS_USE_SKILL.skill_id)
  return skill_id_;
}
void CS_USE_SKILL::set_skill_id(::google::protobuf::int32 value) {
  
  skill_id_ = value;
  // @@protoc_insertion_point(field_set:GAME.CS_USE_SKILL.skill_id)
}

// float forward_x = 2;
void CS_USE_SKILL::clear_forward_x() {
  forward_x_ = 0;
}
float CS_USE_SKILL::forward_x() const {
  // @@protoc_insertion_point(field_get:GAME.CS_USE_SKILL.forward_x)
  return forward_x_;
}
void CS_USE_SKILL::set_forward_x(float value) {
  
  forward_x_ = value;
  // @@protoc_insertion_point(field_set:GAME.CS_USE_SKILL.forward_x)
}

// float forward_y = 3;
void CS_USE_SKILL::clear_forward_y() {
  forward_y_ = 0;
}
float CS_USE_SKILL::forward_y() const {
  // @@protoc_insertion_point(field_get:GAME.CS_USE_SKILL.forward_y)
  return forward_y_;
}
void CS_USE_SKILL::set_forward_y(float value) {
  
  forward_y_ = value;
  // @@protoc_insertion_point(field_set:GAME.CS_USE_SKILL.forward_y)
}

// float forward_z = 4;
void CS_USE_SKILL::clear_forward_z() {
  forward_z_ = 0;
}
float CS_USE_SKILL::forward_z() const {
  // @@protoc_insertion_point(field_get:GAME.CS_USE_SKILL.forward_z)
  return forward_z_;
}
void CS_USE_SKILL::set_forward_z(float value) {
  
  forward_z_ = value;
  // @@protoc_insertion_point(field_set:GAME.CS_USE_SKILL.forward_z)
}

// float rot_x = 5;
void CS_USE_SKILL::clear_rot_x() {
  rot_x_ = 0;
}
float CS_USE_SKILL::rot_x() const {
  // @@protoc_insertion_point(field_get:GAME.CS_USE_SKILL.rot_x)
  return rot_x_;
}
void CS_USE_SKILL::set_rot_x(float value) {
  
  rot_x_ = value;
  // @@protoc_insertion_point(field_set:GAME.CS_USE_SKILL.rot_x)
}

// float rot_y = 6;
void CS_USE_SKILL::clear_rot_y() {
  rot_y_ = 0;
}
float CS_USE_SKILL::rot_y() const {
  // @@protoc_insertion_point(field_get:GAME.CS_USE_SKILL.rot_y)
  return rot_y_;
}
void CS_USE_SKILL::set_rot_y(float value) {
  
  rot_y_ = value;
  // @@protoc_insertion_point(field_set:GAME.CS_USE_SKILL.rot_y)
}

// float rot_z = 7;
void CS_USE_SKILL::clear_rot_z() {
  rot_z_ = 0;
}
float CS_USE_SKILL::rot_z() const {
  // @@protoc_insertion_point(field_get:GAME.CS_USE_SKILL.rot_z)
  return rot_z_;
}
void CS_USE_SKILL::set_rot_z(float value) {
  
  rot_z_ = value;
  // @@protoc_insertion_point(field_set:GAME.CS_USE_SKILL.rot_z)
}

// float rot_w = 8;
void CS_USE_SKILL::clear_rot_w() {
  rot_w_ = 0;
}
float CS_USE_SKILL::rot_w() const {
  // @@protoc_insertion_point(field_get:GAME.CS_USE_SKILL.rot_w)
  return rot_w_;
}
void CS_USE_SKILL::set_rot_w(float value) {
  
  rot_w_ = value;
  // @@protoc_insertion_point(field_set:GAME.CS_USE_SKILL.rot_w)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_NOTI_USE_SKILL::kKeyFieldNumber;
const int SC_NOTI_USE_SKILL::kSkillKeyFieldNumber;
const int SC_NOTI_USE_SKILL::kSkillIdFieldNumber;
const int SC_NOTI_USE_SKILL::kPosXFieldNumber;
const int SC_NOTI_USE_SKILL::kPosYFieldNumber;
const int SC_NOTI_USE_SKILL::kPosZFieldNumber;
const int SC_NOTI_USE_SKILL::kForwardXFieldNumber;
const int SC_NOTI_USE_SKILL::kForwardYFieldNumber;
const int SC_NOTI_USE_SKILL::kForwardZFieldNumber;
const int SC_NOTI_USE_SKILL::kRotXFieldNumber;
const int SC_NOTI_USE_SKILL::kRotYFieldNumber;
const int SC_NOTI_USE_SKILL::kRotZFieldNumber;
const int SC_NOTI_USE_SKILL::kRotWFieldNumber;
const int SC_NOTI_USE_SKILL::kDistanceFieldNumber;
const int SC_NOTI_USE_SKILL::kSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_NOTI_USE_SKILL::SC_NOTI_USE_SKILL()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_GAME_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GAME.SC_NOTI_USE_SKILL)
}
SC_NOTI_USE_SKILL::SC_NOTI_USE_SKILL(const SC_NOTI_USE_SKILL& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&key_, &from.key_,
    reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&key_) + sizeof(speed_));
  // @@protoc_insertion_point(copy_constructor:GAME.SC_NOTI_USE_SKILL)
}

void SC_NOTI_USE_SKILL::SharedCtor() {
  ::memset(&key_, 0, reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&key_) + sizeof(speed_));
  _cached_size_ = 0;
}

SC_NOTI_USE_SKILL::~SC_NOTI_USE_SKILL() {
  // @@protoc_insertion_point(destructor:GAME.SC_NOTI_USE_SKILL)
  SharedDtor();
}

void SC_NOTI_USE_SKILL::SharedDtor() {
}

void SC_NOTI_USE_SKILL::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_NOTI_USE_SKILL::descriptor() {
  protobuf_GAME_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GAME_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_NOTI_USE_SKILL& SC_NOTI_USE_SKILL::default_instance() {
  protobuf_GAME_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_NOTI_USE_SKILL* SC_NOTI_USE_SKILL::New(::google::protobuf::Arena* arena) const {
  SC_NOTI_USE_SKILL* n = new SC_NOTI_USE_SKILL;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_NOTI_USE_SKILL::Clear() {
// @@protoc_insertion_point(message_clear_start:GAME.SC_NOTI_USE_SKILL)
  ::memset(&key_, 0, reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&key_) + sizeof(speed_));
}

bool SC_NOTI_USE_SKILL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GAME.SC_NOTI_USE_SKILL)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 skill_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &skill_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 skill_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pos_x = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pos_y = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pos_z = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float forward_x = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &forward_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float forward_y = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &forward_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float forward_z = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &forward_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rot_x = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rot_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rot_y = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rot_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rot_z = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rot_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rot_w = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rot_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float distance = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float speed = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GAME.SC_NOTI_USE_SKILL)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GAME.SC_NOTI_USE_SKILL)
  return false;
#undef DO_
}

void SC_NOTI_USE_SKILL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GAME.SC_NOTI_USE_SKILL)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 key = 1;
  if (this->key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->key(), output);
  }

  // int64 skill_key = 2;
  if (this->skill_key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->skill_key(), output);
  }

  // int32 skill_id = 3;
  if (this->skill_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->skill_id(), output);
  }

  // float pos_x = 4;
  if (this->pos_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->pos_x(), output);
  }

  // float pos_y = 5;
  if (this->pos_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->pos_y(), output);
  }

  // float pos_z = 6;
  if (this->pos_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->pos_z(), output);
  }

  // float forward_x = 7;
  if (this->forward_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->forward_x(), output);
  }

  // float forward_y = 8;
  if (this->forward_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->forward_y(), output);
  }

  // float forward_z = 9;
  if (this->forward_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->forward_z(), output);
  }

  // float rot_x = 10;
  if (this->rot_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->rot_x(), output);
  }

  // float rot_y = 11;
  if (this->rot_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->rot_y(), output);
  }

  // float rot_z = 12;
  if (this->rot_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->rot_z(), output);
  }

  // float rot_w = 13;
  if (this->rot_w() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->rot_w(), output);
  }

  // float distance = 14;
  if (this->distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->distance(), output);
  }

  // float speed = 15;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->speed(), output);
  }

  // @@protoc_insertion_point(serialize_end:GAME.SC_NOTI_USE_SKILL)
}

::google::protobuf::uint8* SC_NOTI_USE_SKILL::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GAME.SC_NOTI_USE_SKILL)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 key = 1;
  if (this->key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->key(), target);
  }

  // int64 skill_key = 2;
  if (this->skill_key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->skill_key(), target);
  }

  // int32 skill_id = 3;
  if (this->skill_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->skill_id(), target);
  }

  // float pos_x = 4;
  if (this->pos_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->pos_x(), target);
  }

  // float pos_y = 5;
  if (this->pos_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->pos_y(), target);
  }

  // float pos_z = 6;
  if (this->pos_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->pos_z(), target);
  }

  // float forward_x = 7;
  if (this->forward_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->forward_x(), target);
  }

  // float forward_y = 8;
  if (this->forward_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->forward_y(), target);
  }

  // float forward_z = 9;
  if (this->forward_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->forward_z(), target);
  }

  // float rot_x = 10;
  if (this->rot_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->rot_x(), target);
  }

  // float rot_y = 11;
  if (this->rot_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->rot_y(), target);
  }

  // float rot_z = 12;
  if (this->rot_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->rot_z(), target);
  }

  // float rot_w = 13;
  if (this->rot_w() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->rot_w(), target);
  }

  // float distance = 14;
  if (this->distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->distance(), target);
  }

  // float speed = 15;
  if (this->speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->speed(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GAME.SC_NOTI_USE_SKILL)
  return target;
}

size_t SC_NOTI_USE_SKILL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GAME.SC_NOTI_USE_SKILL)
  size_t total_size = 0;

  // int64 key = 1;
  if (this->key() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->key());
  }

  // int64 skill_key = 2;
  if (this->skill_key() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->skill_key());
  }

  // int32 skill_id = 3;
  if (this->skill_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->skill_id());
  }

  // float pos_x = 4;
  if (this->pos_x() != 0) {
    total_size += 1 + 4;
  }

  // float pos_y = 5;
  if (this->pos_y() != 0) {
    total_size += 1 + 4;
  }

  // float pos_z = 6;
  if (this->pos_z() != 0) {
    total_size += 1 + 4;
  }

  // float forward_x = 7;
  if (this->forward_x() != 0) {
    total_size += 1 + 4;
  }

  // float forward_y = 8;
  if (this->forward_y() != 0) {
    total_size += 1 + 4;
  }

  // float forward_z = 9;
  if (this->forward_z() != 0) {
    total_size += 1 + 4;
  }

  // float rot_x = 10;
  if (this->rot_x() != 0) {
    total_size += 1 + 4;
  }

  // float rot_y = 11;
  if (this->rot_y() != 0) {
    total_size += 1 + 4;
  }

  // float rot_z = 12;
  if (this->rot_z() != 0) {
    total_size += 1 + 4;
  }

  // float rot_w = 13;
  if (this->rot_w() != 0) {
    total_size += 1 + 4;
  }

  // float distance = 14;
  if (this->distance() != 0) {
    total_size += 1 + 4;
  }

  // float speed = 15;
  if (this->speed() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_NOTI_USE_SKILL::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GAME.SC_NOTI_USE_SKILL)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_NOTI_USE_SKILL* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_NOTI_USE_SKILL>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GAME.SC_NOTI_USE_SKILL)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GAME.SC_NOTI_USE_SKILL)
    MergeFrom(*source);
  }
}

void SC_NOTI_USE_SKILL::MergeFrom(const SC_NOTI_USE_SKILL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GAME.SC_NOTI_USE_SKILL)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key() != 0) {
    set_key(from.key());
  }
  if (from.skill_key() != 0) {
    set_skill_key(from.skill_key());
  }
  if (from.skill_id() != 0) {
    set_skill_id(from.skill_id());
  }
  if (from.pos_x() != 0) {
    set_pos_x(from.pos_x());
  }
  if (from.pos_y() != 0) {
    set_pos_y(from.pos_y());
  }
  if (from.pos_z() != 0) {
    set_pos_z(from.pos_z());
  }
  if (from.forward_x() != 0) {
    set_forward_x(from.forward_x());
  }
  if (from.forward_y() != 0) {
    set_forward_y(from.forward_y());
  }
  if (from.forward_z() != 0) {
    set_forward_z(from.forward_z());
  }
  if (from.rot_x() != 0) {
    set_rot_x(from.rot_x());
  }
  if (from.rot_y() != 0) {
    set_rot_y(from.rot_y());
  }
  if (from.rot_z() != 0) {
    set_rot_z(from.rot_z());
  }
  if (from.rot_w() != 0) {
    set_rot_w(from.rot_w());
  }
  if (from.distance() != 0) {
    set_distance(from.distance());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
}

void SC_NOTI_USE_SKILL::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GAME.SC_NOTI_USE_SKILL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_NOTI_USE_SKILL::CopyFrom(const SC_NOTI_USE_SKILL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GAME.SC_NOTI_USE_SKILL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_NOTI_USE_SKILL::IsInitialized() const {
  return true;
}

void SC_NOTI_USE_SKILL::Swap(SC_NOTI_USE_SKILL* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_NOTI_USE_SKILL::InternalSwap(SC_NOTI_USE_SKILL* other) {
  std::swap(key_, other->key_);
  std::swap(skill_key_, other->skill_key_);
  std::swap(skill_id_, other->skill_id_);
  std::swap(pos_x_, other->pos_x_);
  std::swap(pos_y_, other->pos_y_);
  std::swap(pos_z_, other->pos_z_);
  std::swap(forward_x_, other->forward_x_);
  std::swap(forward_y_, other->forward_y_);
  std::swap(forward_z_, other->forward_z_);
  std::swap(rot_x_, other->rot_x_);
  std::swap(rot_y_, other->rot_y_);
  std::swap(rot_z_, other->rot_z_);
  std::swap(rot_w_, other->rot_w_);
  std::swap(distance_, other->distance_);
  std::swap(speed_, other->speed_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_NOTI_USE_SKILL::GetMetadata() const {
  protobuf_GAME_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GAME_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_NOTI_USE_SKILL

// int64 key = 1;
void SC_NOTI_USE_SKILL::clear_key() {
  key_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SC_NOTI_USE_SKILL::key() const {
  // @@protoc_insertion_point(field_get:GAME.SC_NOTI_USE_SKILL.key)
  return key_;
}
void SC_NOTI_USE_SKILL::set_key(::google::protobuf::int64 value) {
  
  key_ = value;
  // @@protoc_insertion_point(field_set:GAME.SC_NOTI_USE_SKILL.key)
}

// int64 skill_key = 2;
void SC_NOTI_USE_SKILL::clear_skill_key() {
  skill_key_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SC_NOTI_USE_SKILL::skill_key() const {
  // @@protoc_insertion_point(field_get:GAME.SC_NOTI_USE_SKILL.skill_key)
  return skill_key_;
}
void SC_NOTI_USE_SKILL::set_skill_key(::google::protobuf::int64 value) {
  
  skill_key_ = value;
  // @@protoc_insertion_point(field_set:GAME.SC_NOTI_USE_SKILL.skill_key)
}

// int32 skill_id = 3;
void SC_NOTI_USE_SKILL::clear_skill_id() {
  skill_id_ = 0;
}
::google::protobuf::int32 SC_NOTI_USE_SKILL::skill_id() const {
  // @@protoc_insertion_point(field_get:GAME.SC_NOTI_USE_SKILL.skill_id)
  return skill_id_;
}
void SC_NOTI_USE_SKILL::set_skill_id(::google::protobuf::int32 value) {
  
  skill_id_ = value;
  // @@protoc_insertion_point(field_set:GAME.SC_NOTI_USE_SKILL.skill_id)
}

// float pos_x = 4;
void SC_NOTI_USE_SKILL::clear_pos_x() {
  pos_x_ = 0;
}
float SC_NOTI_USE_SKILL::pos_x() const {
  // @@protoc_insertion_point(field_get:GAME.SC_NOTI_USE_SKILL.pos_x)
  return pos_x_;
}
void SC_NOTI_USE_SKILL::set_pos_x(float value) {
  
  pos_x_ = value;
  // @@protoc_insertion_point(field_set:GAME.SC_NOTI_USE_SKILL.pos_x)
}

// float pos_y = 5;
void SC_NOTI_USE_SKILL::clear_pos_y() {
  pos_y_ = 0;
}
float SC_NOTI_USE_SKILL::pos_y() const {
  // @@protoc_insertion_point(field_get:GAME.SC_NOTI_USE_SKILL.pos_y)
  return pos_y_;
}
void SC_NOTI_USE_SKILL::set_pos_y(float value) {
  
  pos_y_ = value;
  // @@protoc_insertion_point(field_set:GAME.SC_NOTI_USE_SKILL.pos_y)
}

// float pos_z = 6;
void SC_NOTI_USE_SKILL::clear_pos_z() {
  pos_z_ = 0;
}
float SC_NOTI_USE_SKILL::pos_z() const {
  // @@protoc_insertion_point(field_get:GAME.SC_NOTI_USE_SKILL.pos_z)
  return pos_z_;
}
void SC_NOTI_USE_SKILL::set_pos_z(float value) {
  
  pos_z_ = value;
  // @@protoc_insertion_point(field_set:GAME.SC_NOTI_USE_SKILL.pos_z)
}

// float forward_x = 7;
void SC_NOTI_USE_SKILL::clear_forward_x() {
  forward_x_ = 0;
}
float SC_NOTI_USE_SKILL::forward_x() const {
  // @@protoc_insertion_point(field_get:GAME.SC_NOTI_USE_SKILL.forward_x)
  return forward_x_;
}
void SC_NOTI_USE_SKILL::set_forward_x(float value) {
  
  forward_x_ = value;
  // @@protoc_insertion_point(field_set:GAME.SC_NOTI_USE_SKILL.forward_x)
}

// float forward_y = 8;
void SC_NOTI_USE_SKILL::clear_forward_y() {
  forward_y_ = 0;
}
float SC_NOTI_USE_SKILL::forward_y() const {
  // @@protoc_insertion_point(field_get:GAME.SC_NOTI_USE_SKILL.forward_y)
  return forward_y_;
}
void SC_NOTI_USE_SKILL::set_forward_y(float value) {
  
  forward_y_ = value;
  // @@protoc_insertion_point(field_set:GAME.SC_NOTI_USE_SKILL.forward_y)
}

// float forward_z = 9;
void SC_NOTI_USE_SKILL::clear_forward_z() {
  forward_z_ = 0;
}
float SC_NOTI_USE_SKILL::forward_z() const {
  // @@protoc_insertion_point(field_get:GAME.SC_NOTI_USE_SKILL.forward_z)
  return forward_z_;
}
void SC_NOTI_USE_SKILL::set_forward_z(float value) {
  
  forward_z_ = value;
  // @@protoc_insertion_point(field_set:GAME.SC_NOTI_USE_SKILL.forward_z)
}

// float rot_x = 10;
void SC_NOTI_USE_SKILL::clear_rot_x() {
  rot_x_ = 0;
}
float SC_NOTI_USE_SKILL::rot_x() const {
  // @@protoc_insertion_point(field_get:GAME.SC_NOTI_USE_SKILL.rot_x)
  return rot_x_;
}
void SC_NOTI_USE_SKILL::set_rot_x(float value) {
  
  rot_x_ = value;
  // @@protoc_insertion_point(field_set:GAME.SC_NOTI_USE_SKILL.rot_x)
}

// float rot_y = 11;
void SC_NOTI_USE_SKILL::clear_rot_y() {
  rot_y_ = 0;
}
float SC_NOTI_USE_SKILL::rot_y() const {
  // @@protoc_insertion_point(field_get:GAME.SC_NOTI_USE_SKILL.rot_y)
  return rot_y_;
}
void SC_NOTI_USE_SKILL::set_rot_y(float value) {
  
  rot_y_ = value;
  // @@protoc_insertion_point(field_set:GAME.SC_NOTI_USE_SKILL.rot_y)
}

// float rot_z = 12;
void SC_NOTI_USE_SKILL::clear_rot_z() {
  rot_z_ = 0;
}
float SC_NOTI_USE_SKILL::rot_z() const {
  // @@protoc_insertion_point(field_get:GAME.SC_NOTI_USE_SKILL.rot_z)
  return rot_z_;
}
void SC_NOTI_USE_SKILL::set_rot_z(float value) {
  
  rot_z_ = value;
  // @@protoc_insertion_point(field_set:GAME.SC_NOTI_USE_SKILL.rot_z)
}

// float rot_w = 13;
void SC_NOTI_USE_SKILL::clear_rot_w() {
  rot_w_ = 0;
}
float SC_NOTI_USE_SKILL::rot_w() const {
  // @@protoc_insertion_point(field_get:GAME.SC_NOTI_USE_SKILL.rot_w)
  return rot_w_;
}
void SC_NOTI_USE_SKILL::set_rot_w(float value) {
  
  rot_w_ = value;
  // @@protoc_insertion_point(field_set:GAME.SC_NOTI_USE_SKILL.rot_w)
}

// float distance = 14;
void SC_NOTI_USE_SKILL::clear_distance() {
  distance_ = 0;
}
float SC_NOTI_USE_SKILL::distance() const {
  // @@protoc_insertion_point(field_get:GAME.SC_NOTI_USE_SKILL.distance)
  return distance_;
}
void SC_NOTI_USE_SKILL::set_distance(float value) {
  
  distance_ = value;
  // @@protoc_insertion_point(field_set:GAME.SC_NOTI_USE_SKILL.distance)
}

// float speed = 15;
void SC_NOTI_USE_SKILL::clear_speed() {
  speed_ = 0;
}
float SC_NOTI_USE_SKILL::speed() const {
  // @@protoc_insertion_point(field_get:GAME.SC_NOTI_USE_SKILL.speed)
  return speed_;
}
void SC_NOTI_USE_SKILL::set_speed(float value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:GAME.SC_NOTI_USE_SKILL.speed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_NOTI_DESTROY_SKILL::kSkillKeyFieldNumber;
const int SC_NOTI_DESTROY_SKILL::kTargetKeyFieldNumber;
const int SC_NOTI_DESTROY_SKILL::kDamageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_NOTI_DESTROY_SKILL::SC_NOTI_DESTROY_SKILL()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_GAME_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GAME.SC_NOTI_DESTROY_SKILL)
}
SC_NOTI_DESTROY_SKILL::SC_NOTI_DESTROY_SKILL(const SC_NOTI_DESTROY_SKILL& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&skill_key_, &from.skill_key_,
    reinterpret_cast<char*>(&damage_) -
    reinterpret_cast<char*>(&skill_key_) + sizeof(damage_));
  // @@protoc_insertion_point(copy_constructor:GAME.SC_NOTI_DESTROY_SKILL)
}

void SC_NOTI_DESTROY_SKILL::SharedCtor() {
  ::memset(&skill_key_, 0, reinterpret_cast<char*>(&damage_) -
    reinterpret_cast<char*>(&skill_key_) + sizeof(damage_));
  _cached_size_ = 0;
}

SC_NOTI_DESTROY_SKILL::~SC_NOTI_DESTROY_SKILL() {
  // @@protoc_insertion_point(destructor:GAME.SC_NOTI_DESTROY_SKILL)
  SharedDtor();
}

void SC_NOTI_DESTROY_SKILL::SharedDtor() {
}

void SC_NOTI_DESTROY_SKILL::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_NOTI_DESTROY_SKILL::descriptor() {
  protobuf_GAME_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GAME_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_NOTI_DESTROY_SKILL& SC_NOTI_DESTROY_SKILL::default_instance() {
  protobuf_GAME_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_NOTI_DESTROY_SKILL* SC_NOTI_DESTROY_SKILL::New(::google::protobuf::Arena* arena) const {
  SC_NOTI_DESTROY_SKILL* n = new SC_NOTI_DESTROY_SKILL;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_NOTI_DESTROY_SKILL::Clear() {
// @@protoc_insertion_point(message_clear_start:GAME.SC_NOTI_DESTROY_SKILL)
  ::memset(&skill_key_, 0, reinterpret_cast<char*>(&damage_) -
    reinterpret_cast<char*>(&skill_key_) + sizeof(damage_));
}

bool SC_NOTI_DESTROY_SKILL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GAME.SC_NOTI_DESTROY_SKILL)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 skill_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &skill_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 target_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &target_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float damage = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &damage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GAME.SC_NOTI_DESTROY_SKILL)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GAME.SC_NOTI_DESTROY_SKILL)
  return false;
#undef DO_
}

void SC_NOTI_DESTROY_SKILL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GAME.SC_NOTI_DESTROY_SKILL)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 skill_key = 1;
  if (this->skill_key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->skill_key(), output);
  }

  // int64 target_key = 2;
  if (this->target_key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->target_key(), output);
  }

  // float damage = 3;
  if (this->damage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->damage(), output);
  }

  // @@protoc_insertion_point(serialize_end:GAME.SC_NOTI_DESTROY_SKILL)
}

::google::protobuf::uint8* SC_NOTI_DESTROY_SKILL::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GAME.SC_NOTI_DESTROY_SKILL)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 skill_key = 1;
  if (this->skill_key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->skill_key(), target);
  }

  // int64 target_key = 2;
  if (this->target_key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->target_key(), target);
  }

  // float damage = 3;
  if (this->damage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->damage(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GAME.SC_NOTI_DESTROY_SKILL)
  return target;
}

size_t SC_NOTI_DESTROY_SKILL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GAME.SC_NOTI_DESTROY_SKILL)
  size_t total_size = 0;

  // int64 skill_key = 1;
  if (this->skill_key() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->skill_key());
  }

  // int64 target_key = 2;
  if (this->target_key() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->target_key());
  }

  // float damage = 3;
  if (this->damage() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_NOTI_DESTROY_SKILL::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GAME.SC_NOTI_DESTROY_SKILL)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_NOTI_DESTROY_SKILL* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_NOTI_DESTROY_SKILL>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GAME.SC_NOTI_DESTROY_SKILL)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GAME.SC_NOTI_DESTROY_SKILL)
    MergeFrom(*source);
  }
}

void SC_NOTI_DESTROY_SKILL::MergeFrom(const SC_NOTI_DESTROY_SKILL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GAME.SC_NOTI_DESTROY_SKILL)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.skill_key() != 0) {
    set_skill_key(from.skill_key());
  }
  if (from.target_key() != 0) {
    set_target_key(from.target_key());
  }
  if (from.damage() != 0) {
    set_damage(from.damage());
  }
}

void SC_NOTI_DESTROY_SKILL::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GAME.SC_NOTI_DESTROY_SKILL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_NOTI_DESTROY_SKILL::CopyFrom(const SC_NOTI_DESTROY_SKILL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GAME.SC_NOTI_DESTROY_SKILL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_NOTI_DESTROY_SKILL::IsInitialized() const {
  return true;
}

void SC_NOTI_DESTROY_SKILL::Swap(SC_NOTI_DESTROY_SKILL* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_NOTI_DESTROY_SKILL::InternalSwap(SC_NOTI_DESTROY_SKILL* other) {
  std::swap(skill_key_, other->skill_key_);
  std::swap(target_key_, other->target_key_);
  std::swap(damage_, other->damage_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_NOTI_DESTROY_SKILL::GetMetadata() const {
  protobuf_GAME_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GAME_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_NOTI_DESTROY_SKILL

// int64 skill_key = 1;
void SC_NOTI_DESTROY_SKILL::clear_skill_key() {
  skill_key_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SC_NOTI_DESTROY_SKILL::skill_key() const {
  // @@protoc_insertion_point(field_get:GAME.SC_NOTI_DESTROY_SKILL.skill_key)
  return skill_key_;
}
void SC_NOTI_DESTROY_SKILL::set_skill_key(::google::protobuf::int64 value) {
  
  skill_key_ = value;
  // @@protoc_insertion_point(field_set:GAME.SC_NOTI_DESTROY_SKILL.skill_key)
}

// int64 target_key = 2;
void SC_NOTI_DESTROY_SKILL::clear_target_key() {
  target_key_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SC_NOTI_DESTROY_SKILL::target_key() const {
  // @@protoc_insertion_point(field_get:GAME.SC_NOTI_DESTROY_SKILL.target_key)
  return target_key_;
}
void SC_NOTI_DESTROY_SKILL::set_target_key(::google::protobuf::int64 value) {
  
  target_key_ = value;
  // @@protoc_insertion_point(field_set:GAME.SC_NOTI_DESTROY_SKILL.target_key)
}

// float damage = 3;
void SC_NOTI_DESTROY_SKILL::clear_damage() {
  damage_ = 0;
}
float SC_NOTI_DESTROY_SKILL::damage() const {
  // @@protoc_insertion_point(field_get:GAME.SC_NOTI_DESTROY_SKILL.damage)
  return damage_;
}
void SC_NOTI_DESTROY_SKILL::set_damage(float value) {
  
  damage_ = value;
  // @@protoc_insertion_point(field_set:GAME.SC_NOTI_DESTROY_SKILL.damage)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_PING::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_PING::CS_PING()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_GAME_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GAME.CS_PING)
}
CS_PING::CS_PING(const CS_PING& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:GAME.CS_PING)
}

void CS_PING::SharedCtor() {
  timestamp_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

CS_PING::~CS_PING() {
  // @@protoc_insertion_point(destructor:GAME.CS_PING)
  SharedDtor();
}

void CS_PING::SharedDtor() {
}

void CS_PING::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_PING::descriptor() {
  protobuf_GAME_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GAME_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_PING& CS_PING::default_instance() {
  protobuf_GAME_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_PING* CS_PING::New(::google::protobuf::Arena* arena) const {
  CS_PING* n = new CS_PING;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_PING::Clear() {
// @@protoc_insertion_point(message_clear_start:GAME.CS_PING)
  timestamp_ = GOOGLE_LONGLONG(0);
}

bool CS_PING::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GAME.CS_PING)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GAME.CS_PING)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GAME.CS_PING)
  return false;
#undef DO_
}

void CS_PING::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GAME.CS_PING)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // @@protoc_insertion_point(serialize_end:GAME.CS_PING)
}

::google::protobuf::uint8* CS_PING::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GAME.CS_PING)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GAME.CS_PING)
  return target;
}

size_t CS_PING::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GAME.CS_PING)
  size_t total_size = 0;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_PING::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GAME.CS_PING)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_PING* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_PING>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GAME.CS_PING)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GAME.CS_PING)
    MergeFrom(*source);
  }
}

void CS_PING::MergeFrom(const CS_PING& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GAME.CS_PING)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void CS_PING::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GAME.CS_PING)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_PING::CopyFrom(const CS_PING& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GAME.CS_PING)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_PING::IsInitialized() const {
  return true;
}

void CS_PING::Swap(CS_PING* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_PING::InternalSwap(CS_PING* other) {
  std::swap(timestamp_, other->timestamp_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_PING::GetMetadata() const {
  protobuf_GAME_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GAME_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_PING

// int64 timestamp = 1;
void CS_PING::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 CS_PING::timestamp() const {
  // @@protoc_insertion_point(field_get:GAME.CS_PING.timestamp)
  return timestamp_;
}
void CS_PING::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:GAME.CS_PING.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_PING::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_PING::SC_PING()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_GAME_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GAME.SC_PING)
}
SC_PING::SC_PING(const SC_PING& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:GAME.SC_PING)
}

void SC_PING::SharedCtor() {
  timestamp_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

SC_PING::~SC_PING() {
  // @@protoc_insertion_point(destructor:GAME.SC_PING)
  SharedDtor();
}

void SC_PING::SharedDtor() {
}

void SC_PING::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_PING::descriptor() {
  protobuf_GAME_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GAME_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_PING& SC_PING::default_instance() {
  protobuf_GAME_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_PING* SC_PING::New(::google::protobuf::Arena* arena) const {
  SC_PING* n = new SC_PING;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_PING::Clear() {
// @@protoc_insertion_point(message_clear_start:GAME.SC_PING)
  timestamp_ = GOOGLE_LONGLONG(0);
}

bool SC_PING::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GAME.SC_PING)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GAME.SC_PING)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GAME.SC_PING)
  return false;
#undef DO_
}

void SC_PING::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GAME.SC_PING)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // @@protoc_insertion_point(serialize_end:GAME.SC_PING)
}

::google::protobuf::uint8* SC_PING::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GAME.SC_PING)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GAME.SC_PING)
  return target;
}

size_t SC_PING::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GAME.SC_PING)
  size_t total_size = 0;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_PING::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GAME.SC_PING)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_PING* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_PING>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GAME.SC_PING)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GAME.SC_PING)
    MergeFrom(*source);
  }
}

void SC_PING::MergeFrom(const SC_PING& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GAME.SC_PING)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void SC_PING::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GAME.SC_PING)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_PING::CopyFrom(const SC_PING& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GAME.SC_PING)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_PING::IsInitialized() const {
  return true;
}

void SC_PING::Swap(SC_PING* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_PING::InternalSwap(SC_PING* other) {
  std::swap(timestamp_, other->timestamp_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_PING::GetMetadata() const {
  protobuf_GAME_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GAME_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_PING

// int64 timestamp = 1;
void SC_PING::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SC_PING::timestamp() const {
  // @@protoc_insertion_point(field_get:GAME.SC_PING.timestamp)
  return timestamp_;
}
void SC_PING::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:GAME.SC_PING.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace GAME

// @@protoc_insertion_point(global_scope)
